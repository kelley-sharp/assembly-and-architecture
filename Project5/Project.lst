Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/02/21 23:13:42
<Arrays, Addressing, and Stack-Passed Parameters     (Proj5_  Page 1 - 1


				TITLE Arrays, Addressing, and Stack-Passed Parameters     (Proj5_SharpKel.asm)

				; Author: Kelley Sharp
				; Last Modified: 2/28/2021
				; OSU email address: sharpkel@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 05                 Due Date: 2/28/2021
				; Description: After an introduction, the program generates an array with 200 random numbers between 10 and 29.
				;	The random numbers are printed and the program displays the median value of the array.
				;	The numbers are sorted in ascending order and printed.
				;	Then starting with 10s, the number of instances for each number is displayed
				;	and the program says goodbye. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				ExitProcess proto, dwExitCode:dword

 00000000			.data
				; Global Constants (with text-equivalents for easier string interpolation)
 = 0000000A			LO			EQU 10
 = "10"				LO_T		EQU <"10">
 = 0000001D			HI			EQU 29
 = "29"				Hi_T		EQU <"29">
 = 000000C8			ARRAYSIZE	EQU 200
 = "200"			ARRAYSIZE_T EQU <"200">
 = 00000014			PER_LINE    EQU 20

				; Intro Strings
 00000000 48 69 2C 20 49	intro		BYTE "Hi, I'm Kelley. Let's do some random numbers stuff!", 0
	   27 6D 20 4B 65
	   6C 6C 65 79 2E
	   20 4C 65 74 27
	   73 20 64 6F 20
	   73 6F 6D 65 20
	   72 61 6E 64 6F
	   6D 20 6E 75 6D
	   62 65 72 73 20
	   73 74 75 66 66
	   21 00
 00000034 46 69 72 73 74	describe1	BYTE "First the program will randomly generate ", ARRAYSIZE_T," numbers with values between ", LO_T, " and ", HI_T, ".", 0
	   20 74 68 65 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 72 61
	   6E 64 6F 6D 6C
	   79 20 67 65 6E
	   65 72 61 74 65
	   20 32 30 30 20
	   6E 75 6D 62 65
	   72 73 20 77 69
	   74 68 20 76 61
	   6C 75 65 73 20
	   62 65 74 77 65
	   65 6E 20 31 30
	   20 61 6E 64 20
	   32 39 2E 00
 00000088 54 68 65 6E 20	describe2	BYTE "Then you will be given the median of these numbers.", 0
	   79 6F 75 20 77
	   69 6C 6C 20 62
	   65 20 67 69 76
	   65 6E 20 74 68
	   65 20 6D 65 64
	   69 61 6E 20 6F
	   66 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   2E 00
 000000BC 54 68 65 6E 20	describe3	BYTE "Then you will get to see what these numbers look like sorted in ascending order.", 0
	   79 6F 75 20 77
	   69 6C 6C 20 67
	   65 74 20 74 6F
	   20 73 65 65 20
	   77 68 61 74 20
	   74 68 65 73 65
	   20 6E 75 6D 62
	   65 72 73 20 6C
	   6F 6F 6B 20 6C
	   69 6B 65 20 73
	   6F 72 74 65 64
	   20 69 6E 20 61
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 2E
	   00
 0000010D 46 69 6E 61 6C	describe4	BYTE "Finally the program will print how many of each number we got, starting with the ", LO_T, "s.", 0
	   6C 79 20 74 68
	   65 20 70 72 6F
	   67 72 61 6D 20
	   77 69 6C 6C 20
	   70 72 69 6E 74
	   20 68 6F 77 20
	   6D 61 6E 79 20
	   6F 66 20 65 61
	   63 68 20 6E 75
	   6D 62 65 72 20
	   77 65 20 67 6F
	   74 2C 20 73 74
	   61 72 74 69 6E
	   67 20 77 69 74
	   68 20 74 68 65
	   20 31 30 73 2E
	   00

				; Label/Misc Strings
 00000163 48 65 72 65 27	random_msg	BYTE "Here's ", ARRAYSIZE_T, " random numbers, all disorganized:", 0 
	   73 20 32 30 30
	   20 72 61 6E 64
	   6F 6D 20 6E 75
	   6D 62 65 72 73
	   2C 20 61 6C 6C
	   20 64 69 73 6F
	   72 67 61 6E 69
	   7A 65 64 3A 00
 00000190 41 6E 64 20 74	median_msg	BYTE "And the median of the numbers is....", 0
	   68 65 20 6D 65
	   64 69 61 6E 20
	   6F 66 20 74 68
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 2E 2E 2E
	   2E 00
 000001B5 21 00			exclaim		BYTE "!", 0
 000001B7 54 68 69 73 20	sorted_msg	BYTE "This is what they look like sorted:", 0
	   69 73 20 77 68
	   61 74 20 74 68
	   65 79 20 6C 6F
	   6F 6B 20 6C 69
	   6B 65 20 73 6F
	   72 74 65 64 3A
	   00
 000001DB 41 6E 64 20 68	list_msg	BYTE "And here's the counts of each number, starting with how many ", LO_T, "s there were:", 0
	   65 72 65 27 73
	   20 74 68 65 20
	   63 6F 75 6E 74
	   73 20 6F 66 20
	   65 61 63 68 20
	   6E 75 6D 62 65
	   72 2C 20 73 74
	   61 72 74 69 6E
	   67 20 77 69 74
	   68 20 68 6F 77
	   20 6D 61 6E 79
	   20 31 30 73 20
	   74 68 65 72 65
	   20 77 65 72 65
	   3A 00
 00000228 20 00			space       BYTE " ", 0

				; Numerical variables
 0000022A  000000C8 [		arr			DWORD ARRAYSIZE DUP(?)
	    00000000
	   ]
 0000054A 00000004		arrType		DWORD TYPE arr
 0000054E 00000320		arrBytes    DWORD SIZEOF arr
 00000552 00000000		median_num  DWORD ?  ; To be calculated
 00000556 00000000		perLineIdx  DWORD 0 ; for iterating displayList per line

				; Summary & Conclusion Strings
 0000055A 48 6F 70 65 20	goodbye		BYTE "Hope this wasn't too random, bye!", 0
	   74 68 69 73 20
	   77 61 73 6E 27
	   74 20 74 6F 6F
	   20 72 61 6E 64
	   6F 6D 2C 20 62
	   79 65 21 00

 00000000			.code
 00000000			main PROC

 00000000  68 00000000 R		PUSH OFFSET intro
 00000005  68 00000034 R		PUSH OFFSET describe1
 0000000A  68 00000088 R		PUSH OFFSET describe2
 0000000F  68 000000BC R		PUSH OFFSET describe3
 00000014  68 0000010D R		PUSH OFFSET describe4
 00000019  E8 00000075			CALL introduction

 0000001E  68 0000022A R		PUSH OFFSET arr
 00000023  6A 0A			PUSH LO
 00000025  6A 1D			PUSH HI
 00000027  68 000000C8			PUSH ARRAYSIZE
 0000002C  E8 000000AF			CALL fillArray

 00000031  FF 35 00000556 R		PUSH perLineIdx
 00000037  68 00000228 R		PUSH OFFSET space
 0000003C  6A 14			PUSH PER_LINE
 0000003E  68 0000022A R		PUSH OFFSET arr
 00000043  68 000000C8			PUSH ARRAYSIZE
 00000048  68 00000163 R		PUSH OFFSET random_msg
 0000004D  E8 00000117			CALL displayList

 00000052  68 0000022A R		PUSH OFFSET arr
 00000057  68 000000C8			PUSH ARRAYSIZE
 0000005C  E8 000000BA			CALL sortList

 00000061  FF 35 00000556 R		PUSH perLineIdx
 00000067  68 00000228 R		PUSH OFFSET space
 0000006C  6A 14			PUSH PER_LINE
 0000006E  68 0000022A R		PUSH OFFSET arr
 00000073  68 000000C8			PUSH ARRAYSIZE
 00000078  68 000001B7 R		PUSH OFFSET sorted_msg
 0000007D  E8 000000E7			CALL displayList
					; CALL exchangeElements
					; CALL displayMedian
					; 
					; CALL countList
 00000082  68 0000055A R		PUSH OFFSET goodbye
 00000087  E8 0000013A			CALL farewell

					Invoke ExitProcess, 0
 0000008C  6A 00	   *	    push   +000000000h
 0000008E  E8 00000000 E   *	    call   ExitProcess
 00000093			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; Displays programmer's name and a description of the program.
				; ---------------------------------------------------------------------------------
 00000093			introduction PROC
 00000093  55				PUSH EBP
 00000094  8B EC			MOV  EBP, ESP 

					; Display programmer's name and enthusiastic message
 00000096  8B 55 18			MOV  EDX, [EBP+24]
 00000099  E8 00000000 E		CALL WriteString
 0000009E  E8 00000000 E		CALL CrLf
 000000A3  E8 00000000 E		CALL CrLf
					; Display description
 000000A8  8B 55 14			MOV  EDX, [EBP+20]
 000000AB  E8 00000000 E		CALL WriteString
 000000B0  E8 00000000 E		CALL CrLf
 000000B5  8B 55 10			MOV  EDX, [EBP+16]
 000000B8  E8 00000000 E		CALL WriteString
 000000BD  E8 00000000 E		CALL CrLf
 000000C2  8B 55 0C			MOV  EDX, [EBP+12]
 000000C5  E8 00000000 E		CALL WriteString
 000000CA  E8 00000000 E		CALL CrLf
 000000CF  8B 55 08			MOV  EDX, [EBP+8]
 000000D2  E8 00000000 E		CALL WriteString
 000000D7  E8 00000000 E		CALL CrLf	

 000000DC  5D				POP  EBP
 000000DD  C2 0014			RET  20

 000000E0			introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: fillArray
				;
				; Fills an array with randomly generated numbers.
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: LO, HI, ARRAYSIZE
				;
				; Returns: someArray
				; ---------------------------------------------------------------------------------
 000000E0			fillArray PROC
					LOCAL hiAdjusted:DWORD  ; store the value of HI - LO for randomization

 000000E0  55		   *	    push   ebp
 000000E1  8B EC	   *	    mov    ebp, esp
 000000E3  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000000E6				_preserveRegisters:
 000000E6  50					PUSH  EAX
 000000E7  51					PUSH  ECX
 000000E8  57					PUSH  EDI

 000000E9  E8 00000000 E		CALL Randomize

 000000EE				_generateHiAdjusted:
 000000EE  8B 45 0C				MOV   EAX, [EBP+12] ; HI
 000000F1  8B 5D 10				MOV   EBX, [EBP+16] ; LO
 000000F4  2B C3				SUB   EAX, EBX
 000000F6  40					INC   EAX
 000000F7  89 45 FC				MOV   hiAdjusted, EAX

 000000FA				_setupLoop:
 000000FA  8B 4D 08				MOV   ECX, [EBP+8]  ; loop counter through length of array
 000000FD  8B 7D 14				MOV   EDI, [EBP+20]  ; set EDI to first array element

 00000100				_fillLoop:
 00000100  8B 45 FC				MOV   EAX, hiAdjusted  ; get a random number between [LO, HI]
 00000103  E8 00000000 E			CALL  RandomRange
 00000108  03 45 10				ADD   EAX, [EBP+16] ; add LO to randomized number
 0000010B  89 07				MOV   [EDI], EAX  ; set array element
 0000010D  8B 07				MOV   EAX, [EDI]
 0000010F  83 C7 04				ADD   EDI, 4  ; go to next array element
 00000112  E2 EC				LOOP  _fillLoop

 00000114				_restoreRegisters:
 00000114  5F					POP   EDI
 00000115  59					POP   ECX
 00000116  58					POP   EAX

 00000117  C9		   *	    leave  
 00000118  C2 0010			RET  16
 0000011B			fillArray ENDP

				; ---------------------------------------------------------------------------------
				; Name: sortList
				;
				; Sorts an array in ascending order.
				;
				; Preconditions: 
				;
				; Postconditions:  
				;
				; Receives: someArray, ARRAYSIZE
				;
				; Returns: someArray (sorted)
				; ---------------------------------------------------------------------------------
 0000011B			sortList PROC
 0000011B				_preserveRegisters:
 0000011B  55				    PUSH  EBP
 0000011C  8B EC				MOV   EBP, ESP
 0000011E  50					PUSH  EAX
 0000011F  53					PUSH  EBX
 00000120  51					PUSH  ECX
 00000121  52					PUSH  EDX
 00000122  57					PUSH  EDI
 00000123  56					PUSH  ESI

 00000124				_setupLoop:
 00000124  8B 4D 08				MOV   ECX, [EBP+8]  ; loop counter through length of array
 00000127  49					DEC   ECX  ; loop up to n - 1

 00000128				_outerLoop:
 00000128  51					PUSH  ECX  ; store ECX (inner loop will change this)
 00000129  8B 7D 0C				MOV   EDI, [EBP+12]

 0000012C				_innerLoop:
						; comparison of i with j
 0000012C  8B 07				MOV   EAX, [EDI]
 0000012E  8B 5F 04				MOV   EBX, [EDI+4]
 00000131  3B D8				CMP   EBX, EAX
 00000133  7D 06				JGE    _continueInnerLoop

						; otherwise swap
 00000135  57					PUSH  EDI
 00000136  E8 00000012				CALL exchangeElements

 0000013B				_continueInnerLoop:
 0000013B  83 C7 04				ADD   EDI, 4
 0000013E  E2 EC				LOOP  _innerLoop

 00000140				_continueOuterLoop:
 00000140  59					POP  ECX
 00000141  E2 E5				LOOP _outerLoop

 00000143				_restoreRegisters:
 00000143  5E				    POP   ESI
 00000144  5F					POP   EDI
 00000145  5A					POP   EDX
 00000146  59					POP   ECX
 00000147  5B					POP   EBX
 00000148  58					POP   EAX
 00000149  5D					POP   EBP

 0000014A  C2 0010			RET  16
 0000014D			sortList ENDP

				; ---------------------------------------------------------------------------------
				; Name: exchangeElements
				;
				; If your sorting algo exchanges element positions, this would loop through the array
				;	and swap values at the indicated positions, i and j. 
				;
				; Preconditions: 
				;
				; Postconditions:  
				;
				; Receives: someArray[i], someArray[j]
				;
				; Returns: The new values of someArray[i] and someArray[j] 
				; ---------------------------------------------------------------------------------
 0000014D			exchangeElements PROC
 0000014D				_preserveRegisters:
 0000014D  55					PUSH  EBP
 0000014E  8B EC				MOV   EBP, ESP
 00000150  50					PUSH  EAX
 00000151  53					PUSH  EBX
 00000152  51					PUSH  ECX
 00000153  57					PUSH  EDI

 00000154				_swap:
 00000154  8B 7D 08				MOV EDI, [EBP+8]  ; move first index into EDI
 00000157  8B 07				MOV EAX, [EDI]  ; move first element to EAX
 00000159  8B 5F 04				MOV EBX, [EDI+4] ; move second element to EBX
 0000015C  89 1F				MOV [EDI], EBX ; assign first index to second element
 0000015E  89 47 04				MOV [EDI+4], EAX  ; assign second index to first element


 00000161				_restoreRegisters:
 00000161  5F					POP   EDI
 00000162  59					POP   ECX
 00000163  5B					POP   EBX
 00000164  58					POP   EAX
 00000165  5D					POP   EBP

 00000166  C2 0004			RET  4
 00000169			exchangeElements ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayMedian
				;
				; Prints the median of values in the array.
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: median_msg, someArray, ARRAYSIZE
				;
				; Returns: None
				; ---------------------------------------------------------------------------------
 00000169			displayMedian PROC
 00000169			displayMedian ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayList
				;
				; Prints the array.
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: someArray
				;
				; Returns: None
				; ---------------------------------------------------------------------------------
 00000169			displayList PROC

 00000169				_preserveRegisters:
 00000169  55					PUSH EBP
 0000016A  8B EC				MOV  EBP, ESP
 0000016C  52					PUSH EDX
 0000016D  51					PUSH ECX
 0000016E  53					PUSH EBX
 0000016F  50					PUSH EAX
 00000170  57					PUSH EDI

 00000171				_printTitle:
 00000171  E8 00000000 E			CALL CrLf
 00000176  8B 55 08				MOV  EDX, [EBP+8]
 00000179  E8 00000000 E			CALL WriteString
 0000017E  E8 00000000 E			CALL CrLf

 00000183				_setUpLoop:
 00000183  8B 4D 0C				MOV  ECX, [EBP+12]  ; loop counter through length of array
 00000186  8B 7D 10				MOV  EDI, [EBP+16]  ; set EDI to first array element
 00000189  EB 00				JMP  _printLoop

 0000018B				_printLoop:
						; print the number
 0000018B  8B 07				MOV  EAX, [EDI]
 0000018D  E8 00000000 E			CALL WriteDec
						; print the space between
 00000192  8B 55 18				MOV  EDX, [EBP+24]
 00000195  E8 00000000 E			CALL WriteString
 0000019A  83 C7 04				ADD  EDI, 4  ; go to next array element

						; check if newline is needed
 0000019D  8B 5D 1C				MOV  EBX, [EBP+28]
 000001A0  43					INC  EBX ; increment perLineIdx
 000001A1  89 5D 1C				MOV  [EBP+28], EBX
 000001A4  8B 5D 14				MOV  EBX, [EBP+20] ; perLine 
 000001A7  3B 5D 1C				CMP  EBX, [EBP+28] ; perLineIdx == perLine ?
 000001AA  74 02				JE   _newLine
 000001AC  75 0D				JNE  _noNewLine

 000001AE					_newLine:
 000001AE  E8 00000000 E				CALL CrLf
 000001B3  BB 00000000					MOV EBX, 0
 000001B8  89 5D 1C					MOV [EBP+28], EBX ; reset perLineIdx

 000001BB					_noNewLine:
 000001BB  E2 CE					LOOP _printLoop

 000001BD				_restoreRegisters:
 000001BD  5F					POP  EDI
 000001BE  5A					POP  EDX
 000001BF  59					POP  ECX
 000001C0  5B					POP  EBX
 000001C1  58					POP  EAX
 000001C2  5D					POP  EBP
 000001C3  C2 0018				RET  24
 000001C6			displayList ENDP

				; ---------------------------------------------------------------------------------
				; Name: countList
				;
				;
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives: someArray, ARRAYSIZE, LO, HI
				;
				; Returns: someArray2
				; ---------------------------------------------------------------------------------
 000001C6			countList PROC
 000001C6			countList ENDP

				; ---------------------------------------------------------------------------------
				; Name: farewell
				;
				; Displays parting message with a goodbye
				; ---------------------------------------------------------------------------------	
 000001C6			farewell PROC
 000001C6  55				PUSH EBP
 000001C7  8B EC			MOV  EBP, ESP

 000001C9  E8 00000000 E		CALL CrLf
 000001CE  8B 55 08			MOV  EDX, [EBP+8]
 000001D1  E8 00000000 E		CALL WriteString
 000001D6  E8 00000000 E		CALL CrLf

 000001DB  5D				POP EBP
 000001DC  C2 0004			RET  4

 000001DF			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/02/21 23:13:42
<Arrays, Addressing, and Stack-Passed Parameters     (Proj5_  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000057C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001DF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 000001C6 _TEXT	Length= 00000000 Public STDCALL
displayList  . . . . . . . . . .	P Near	 00000169 _TEXT	Length= 0000005D Public STDCALL
  _preserveRegisters . . . . . .	L Near	 00000169 _TEXT	
  _printTitle  . . . . . . . . .	L Near	 00000171 _TEXT	
  _setUpLoop . . . . . . . . . .	L Near	 00000183 _TEXT	
  _printLoop . . . . . . . . . .	L Near	 0000018B _TEXT	
  _newLine . . . . . . . . . . .	L Near	 000001AE _TEXT	
  _noNewLine . . . . . . . . . .	L Near	 000001BB _TEXT	
  _restoreRegisters  . . . . . .	L Near	 000001BD _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000169 _TEXT	Length= 00000000 Public STDCALL
exchangeElements . . . . . . . .	P Near	 0000014D _TEXT	Length= 0000001C Public STDCALL
  _preserveRegisters . . . . . .	L Near	 0000014D _TEXT	
  _swap  . . . . . . . . . . . .	L Near	 00000154 _TEXT	
  _restoreRegisters  . . . . . .	L Near	 00000161 _TEXT	
farewell . . . . . . . . . . . .	P Near	 000001C6 _TEXT	Length= 00000019 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000E0 _TEXT	Length= 0000003B Public STDCALL
  hiAdjusted . . . . . . . . . .	DWord	 bp - 00000004
  _preserveRegisters . . . . . .	L Near	 000000E6 _TEXT	
  _generateHiAdjusted  . . . . .	L Near	 000000EE _TEXT	
  _setupLoop . . . . . . . . . .	L Near	 000000FA _TEXT	
  _fillLoop  . . . . . . . . . .	L Near	 00000100 _TEXT	
  _restoreRegisters  . . . . . .	L Near	 00000114 _TEXT	
introduction . . . . . . . . . .	P Near	 00000093 _TEXT	Length= 0000004D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000093 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 0000011B _TEXT	Length= 00000032 Public STDCALL
  _preserveRegisters . . . . . .	L Near	 0000011B _TEXT	
  _setupLoop . . . . . . . . . .	L Near	 00000124 _TEXT	
  _outerLoop . . . . . . . . . .	L Near	 00000128 _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 0000012C _TEXT	
  _continueInnerLoop . . . . . .	L Near	 0000013B _TEXT	
  _continueOuterLoop . . . . . .	L Near	 00000140 _TEXT	
  _restoreRegisters  . . . . . .	L Near	 00000143 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE_T  . . . . . . . . . .	Text   	 "200"
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000001Dh   
Hi_T . . . . . . . . . . . . . .	Text   	 "29"
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO_T . . . . . . . . . . . . . .	Text   	 "10"
LO . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PER_LINE . . . . . . . . . . . .	Number	 00000014h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrBytes . . . . . . . . . . . .	DWord	 0000054E _DATA	
arrType  . . . . . . . . . . . .	DWord	 0000054A _DATA	
arr  . . . . . . . . . . . . . .	DWord	 0000022A _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
describe1  . . . . . . . . . . .	Byte	 00000034 _DATA	
describe2  . . . . . . . . . . .	Byte	 00000088 _DATA	
describe3  . . . . . . . . . . .	Byte	 000000BC _DATA	
describe4  . . . . . . . . . . .	Byte	 0000010D _DATA	
exclaim  . . . . . . . . . . . .	Byte	 000001B5 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000055A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list_msg . . . . . . . . . . . .	Byte	 000001DB _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
median_msg . . . . . . . . . . .	Byte	 00000190 _DATA	
median_num . . . . . . . . . . .	DWord	 00000552 _DATA	
perLineIdx . . . . . . . . . . .	DWord	 00000556 _DATA	
random_msg . . . . . . . . . . .	Byte	 00000163 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted_msg . . . . . . . . . . .	Byte	 000001B7 _DATA	
space  . . . . . . . . . . . . .	Byte	 00000228 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
