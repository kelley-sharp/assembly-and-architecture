Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 22:23:37
5String Primitives and Macros     (Proj6_SharpKel.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_SharpKel.asm)

				; Author: Kelley Sharp
				; Last Modified: 3/07/2021
				; OSU email address: sharpkel@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 06                 Due Date: 3/14/2021
				; Description: This program asks the user to enter 10 signed decimal integers,
				;	no more than 32 bits long. After validation passes for 10 numbers, the program
				;	will display the numbers back to the user along with the sum and rounded (floor) average.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				ExitProcess proto, dwExitCode:dword

 = 0000000C			COUNT        EQU 12  ; we want 10 characters + a sign "+"/"-" and a null byte
 = 0000000A			ARRAYSIZE    EQU 10

				mGetString MACRO prompt, strInput, count, strLen
					; preserve registers
					PUSH EAX
					PUSH ECX
					PUSH EDX

					; display prompt
					MOV  EDX, prompt
					CALL WriteString

					; get input up to count
					MOV  EDX, strInput ; set up EDX to point to strInput
					MOV  ECX, count  ; buffer size according to Irvine
					CALL ReadString
					MOV  strLen, EAX ; store length in strLen

					; restore registers
					POP  EAX
					POP  EDX
					POP  ECX

				ENDM

				mDisplayString MACRO strOutput
					; preserve registers
					PUSH EDX

					; print string
					MOV  EDX, strOutput
					CALL WriteString

					; restore registers
					POP EDX

				ENDM

 00000000			.data
				; Global Constants (with text-equivalents for easier string interpolation)

				; Intro Strings
 00000000 50 52 4F 47 52	intro1	    BYTE "PROGRAMMING ASSIGNMENT 6: Getting low (level) with I/0 Procedures", 0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 47 65 74 74
	   69 6E 67 20 6C
	   6F 77 20 28 6C
	   65 76 65 6C 29
	   20 77 69 74 68
	   20 49 2F 30 20
	   50 72 6F 63 65
	   64 75 72 65 73
	   00
 00000042 57 72 69 74 74	intro2	    BYTE "Written by: Kelley Sharp", 0
	   65 6E 20 62 79
	   3A 20 4B 65 6C
	   6C 65 79 20 53
	   68 61 72 70 00
 0000005B 50 6C 65 61 73	intro3	    BYTE "Please enter 10 signed decimal integers.", 0
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   00
 00000084 45 61 63 68 20	intro4      BYTE "Each number needs to fit into a 32-bit register.", 0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 66 69 74 20
	   69 6E 74 6F 20
	   61 20 33 32 2D
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 00
 000000B5 41 66 74 65 72	intro5      BYTE "Afterwards I will give you the full list of integers, their sum, and average.", 0
	   77 61 72 64 73
	   20 49 20 77 69
	   6C 6C 20 67 69
	   76 65 20 79 6F
	   75 20 74 68 65
	   20 66 75 6C 6C
	   20 6C 69 73 74
	   20 6F 66 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 61
	   76 65 72 61 67
	   65 2E 00

				; Prompt
 00000103 50 6C 65 61 73	prompt      BYTE "Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000122 45 52 52 4F 52	errorMsg    BYTE "ERROR: You did not enter an signed number or your number was too big.", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 00

				; Label/Misc Strings
 00000168 54 68 65 73 65	listLabel	BYTE "These are the numbers you entered: ", 0 
	   20 61 72 65 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 79 6F 75
	   20 65 6E 74 65
	   72 65 64 3A 20
	   00
 0000018C 54 68 65 20 73	sumLabel	BYTE "The sum of the numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 000001A8 54 68 65 20 72	avgLabel	BYTE "The rounded (floor) average is: ", 0
	   6F 75 6E 64 65
	   64 20 28 66 6C
	   6F 6F 72 29 20
	   61 76 65 72 61
	   67 65 20 69 73
	   3A 20 00
 000001C9 2C 20 00		commaDL		BYTE ", ", 0   ; delimiter for list output

				; User data variables
 000001CC  0000000C [		inputStr    BYTE   COUNT		DUP(?)  ; tmp storage for ReadVal
	    00
	   ]
 000001D8 00000000		strLen		DWORD  ?					; store the length of the input string
 000001DC  0000000A [		numbers     SDWORD ARRAYSIZE	DUP(?)  ; store the input numbers
	    00000000
	   ]
 00000204 00000000		sum         SDWORD 0
 00000208 00000000		avg         SDWORD 0


				; Summary & Conclusion Strings
 0000020C 49 20 68 6F 70	goodbye		BYTE "I hope you enjoyed using my program! The end.", 0
	   65 20 79 6F 75
	   20 65 6E 6A 6F
	   79 65 64 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 20 54 68 65
	   20 65 6E 64 2E
	   00


 00000000			.code
 00000000			main PROC

 00000000  68 000000B5 R		PUSH OFFSET intro5
 00000005  68 00000084 R		PUSH OFFSET intro4
 0000000A  68 0000005B R		PUSH OFFSET intro3
 0000000F  68 00000042 R		PUSH OFFSET intro2
 00000014  68 00000000 R		PUSH OFFSET intro1
 00000019  E8 0000007B			CALL Introduction

 0000001E  FF 35 000001D8 R		PUSH strLen
 00000024  6A 0C			PUSH COUNT
 00000026  68 000001CC R		PUSH OFFSET inputStr
 0000002B  68 00000122 R		PUSH OFFSET errorMsg
 00000030  68 00000103 R		PUSH OFFSET prompt
 00000035  6A 0A			PUSH ARRAYSIZE
 00000037  68 000001DC R		PUSH OFFSET numbers
 0000003C  E8 00000228			CALL EnterNumbers

 00000041  68 000001C9 R		PUSH OFFSET commaDL
 00000046  68 00000168 R		PUSH OFFSET listLabel
 0000004B  6A 0A			PUSH ARRAYSIZE
 0000004D  68 000001DC R		PUSH OFFSET numbers
 00000052  E8 00000242			CALL PrintArray

 00000057  68 00000208 R		PUSH OFFSET avg
 0000005C  68 00000204 R		PUSH OFFSET sum
 00000061  6A 0A			PUSH ARRAYSIZE
 00000063  68 000001DC R		PUSH OFFSET numbers
 00000068  E8 00000270			CALL ComputeSumAvg

 0000006D  68 000001A8 R		PUSH OFFSET avgLabel
 00000072  FF 35 00000208 R		PUSH avg
 00000078  68 0000018C R		PUSH OFFSET sumLabel
 0000007D  FF 35 00000204 R		PUSH sum
 00000083  E8 000002B0			CALL PrintSumAvg	

 00000088  68 0000020C R		PUSH OFFSET goodbye
 0000008D  E8 000002E2			CALL Farewell

					Invoke ExitProcess, 0
 00000092  6A 00	   *	    push   +000000000h
 00000094  E8 00000000 E   *	    call   ExitProcess
 00000099			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: Introduction
				;
				; Displays programmer's name, program's name, and instructions.
				;
				; Receives: 
				;     intro1   [EBP+8]
				;     intro2   [EBP+12]
				;     intro3   [EBP+16]
				;     intro4   [EBP+20]
				;     intro5   [EBP+24]
				; ---------------------------------------------------------------------------------
 00000099			Introduction PROC
					; preserve registers
 00000099  55				PUSH EBP
 0000009A  8B EC			MOV  EBP, ESP
 0000009C  52				PUSH EDX

					; display name and title
					mDisplayString [EBP+8]
 0000009D  52		     1		PUSH EDX
 0000009E  8B 55 08	     1		MOV  EDX, [EBP+8]
 000000A1  E8 00000000 E     1		CALL WriteString
 000000A6  5A		     1		POP EDX
 000000A7  E8 00000000 E		CALL CrLf
					mDisplayString [EBP+12]
 000000AC  52		     1		PUSH EDX
 000000AD  8B 55 0C	     1		MOV  EDX, [EBP+12]
 000000B0  E8 00000000 E     1		CALL WriteString
 000000B5  5A		     1		POP EDX
 000000B6  E8 00000000 E		CALL CrLf
 000000BB  E8 00000000 E		CALL CrLf

					; display instructions
					mDisplayString [EBP+16]
 000000C0  52		     1		PUSH EDX
 000000C1  8B 55 10	     1		MOV  EDX, [EBP+16]
 000000C4  E8 00000000 E     1		CALL WriteString
 000000C9  5A		     1		POP EDX
 000000CA  E8 00000000 E		CALL CrLf	
					mDisplayString [EBP+20]
 000000CF  52		     1		PUSH EDX
 000000D0  8B 55 14	     1		MOV  EDX, [EBP+20]
 000000D3  E8 00000000 E     1		CALL WriteString
 000000D8  5A		     1		POP EDX
 000000D9  E8 00000000 E		CALL CrLf	
					mDisplayString [EBP+24]
 000000DE  52		     1		PUSH EDX
 000000DF  8B 55 18	     1		MOV  EDX, [EBP+24]
 000000E2  E8 00000000 E     1		CALL WriteString
 000000E7  5A		     1		POP EDX
 000000E8  E8 00000000 E		CALL CrLf
 000000ED  E8 00000000 E		CALL CrLf

					; restore registers
 000000F2  5A				POP EDX
 000000F3  5D				POP EBP
 000000F4  C2 0014			RET 20
 000000F7			Introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Reads an input value from the user and applies validation
				;
				; Preconditions: None
				;
				; Postconditions: Sets the value of inputNum data member to the integer equivalent of the last
				;				  valid string that was entered
				;
				; Receives: 
				;     prompt   [EBP+8]  what to print to user
				;     errorMsg [EBP+12] what to print if the user enters a bad input
				;     inputStr [EBP+16] output parameter by reference
				;     count    [EBP+20] size of the buffer
				;     inputNum [EBP+24] output parameter to store the parsed number
				;     strLen   [EBP+28] maximum string length size
				;
				; ---------------------------------------------------------------------------------
 000000F7			ReadVal PROC
					; local variables
					LOCAL isNegative:BYTE ; byte flag to store whether the input is a negative number
					LOCAL isFirstChar:BYTE ; byte flag for looping - first case is special
					LOCAL currentNum:SDWORD ; store the current number, a running total until the end
					LOCAL nextDigit:SDWORD ; tmp variable to add to current number

					; preserve registers
 000000F7  55		   *	    push   ebp
 000000F8  8B EC	   *	    mov    ebp, esp
 000000FA  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000000FD  50				PUSH EAX
 000000FE  53				PUSH EBX
 000000FF  51				PUSH ECX
 00000100  52				PUSH EDX
 00000101  56				PUSH ESI
 00000102  57				PUSH EDI
 00000103  9C				PUSHFD

 00000104				_getInputAndInitialize:
						mGetString [EBP+8], [EBP+16], [EBP+20], [EBP+28]
 00000104  50		     1		PUSH EAX
 00000105  51		     1		PUSH ECX
 00000106  52		     1		PUSH EDX
 00000107  8B 55 08	     1		MOV  EDX, [EBP+8]
 0000010A  E8 00000000 E     1		CALL WriteString
 0000010F  8B 55 10	     1		MOV  EDX, [EBP+16] ; set up EDX to point to strInput
 00000112  8B 4D 14	     1		MOV  ECX, [EBP+20]  ; buffer size according to Irvine
 00000115  E8 00000000 E     1		CALL ReadString
 0000011A  89 45 1C	     1		MOV  [EBP+28], EAX ; store length in strLen
 0000011D  58		     1		POP  EAX
 0000011E  5A		     1		POP  EDX
 0000011F  59		     1		POP  ECX
						; prepare string to be looped over
 00000120  8B 75 10				MOV  ESI, [EBP+16] ; put string in ESI
 00000123  8B 4D 1C				MOV  ECX, [EBP+28] ; put length in ECX for loop
 00000126  FC					CLD
 00000127  C6 45 FE 01				MOV  isFirstChar, 1
 0000012B  C7 45 F8				MOV  currentNum, 0
	   00000000
 00000132  C6 45 FF 00				MOV  isNegative, 0

 00000136				_loadNextByte:
						; load in 1 byte at a time
 00000136  B8 00000000				MOV   EAX, 0
 0000013B  AC					LODSB
						; skip ahead if not first byte
 0000013C  80 7D FE 00				CMP   isFirstChar, 0
 00000140  74 28				JE    _checkStrByte

 00000142				_checkSignByte:
						; the first char we check to see if there is a sign
 00000142  3C 2D				CMP  AL, 45  ; "-" character
 00000144  74 06				JE   _hasNegativeSign
 00000146  3C 2B				CMP  AL, 43  ; "+" character
 00000148  74 11				JE	 _hasPositiveSign
						; otherwise jump to checkByte normally
 0000014A  EB 1E				JMP  _checkStrByte

 0000014C				_hasNegativeSign:
 0000014C  C6 45 FF 01				MOV  isNegative, 1
 00000150  C6 45 FE 00				MOV  isFirstChar, 0
						; check edge case where user just enters "-"
 00000154  83 F9 01				CMP  ECX, 1
 00000157  74 39				JE   _error
 00000159  EB 33				JMP  _continueLoop

 0000015B				_hasPositiveSign:
 0000015B  C6 45 FF 00				MOV  isNegative, 0
 0000015F  C6 45 FE 00				MOV  isFirstChar, 0
						; check edge case where user just enters "+"
 00000163  83 F9 01				CMP  ECX, 1
 00000166  74 2A				JE   _error
 00000168  EB 24				JMP  _continueLoop

 0000016A				_checkStrByte:
						; ensure it's a valid digit 0-9
 0000016A  3C 30				CMP   AL, 48
 0000016C  72 24				JB    _error
 0000016E  3C 39				CMP   AL, 57
 00000170  77 20				JA    _error

 00000172				_strToNum:
						; algorithm: (10 * currentNum) + nextDigit
 00000172  2C 30				SUB   AL, 48
 00000174  0F B6 C0				MOVZX EAX, AL  ; zero-extend AL so it fits into SDWORD
 00000177  89 45 F4				MOV   nextDigit, EAX
 0000017A  8B 45 F8				MOV   EAX, currentNum
 0000017D  BB 0000000A				MOV   EBX, 10
 00000182  F7 E3				MUL   EBX
 00000184  70 0C				JO	  _error  ; check for overflow issues when doing arithmetic here
 00000186  03 45 F4				ADD   EAX, nextDigit
 00000189  70 07				JO	  _error
 0000018B  89 45 F8				MOV   currentNum, EAX

 0000018E				_continueLoop:
 0000018E  E2 A6				LOOP  _loadNextByte
 00000190  EB 14				JMP   _stringEnd

 00000192				_error:
						mDisplayString [EBP+12]
 00000192  52		     1		PUSH EDX
 00000193  8B 55 0C	     1		MOV  EDX, [EBP+12]
 00000196  E8 00000000 E     1		CALL WriteString
 0000019B  5A		     1		POP EDX
 0000019C  E8 00000000 E			CALL  CrLf
 000001A1  E9 FFFFFF5E				JMP  _getInputAndInitialize

 000001A6				_stringEnd:
 000001A6  80 7D FF 01				CMP   isNegative, 1
 000001AA  74 02				JE    _negate
 000001AC  EB 05				JMP   _storeStr

 000001AE				_negate:
 000001AE  F7 5D F8				NEG   currentNum
 000001B1  70 DF				JO	  _error

 000001B3				_storeStr:
 000001B3  8B 45 F8				MOV   EAX, currentNum
						; assign inputNum (output parameter) the value of currentNum local
 000001B6  8B 7D 18				MOV   EDI, [EBP+24] 
 000001B9  89 07				MOV   [EDI], EAX

					; restore registers
 000001BB  9D				POPFD
 000001BC  5F				POP  EDI
 000001BD  5E				POP  ESI
 000001BE  5A				POP  EDX
 000001BF  59				POP  ECX
 000001C0  5B				POP  EBX
 000001C1  58				POP  EAX

 000001C2  C9		   *	    leave  
 000001C3  C2 0018			RET  24

 000001C6			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Prints a SDWORD value as a string of digits
				;
				; Preconditions: SDWORD in inputNum
				;
				; Postconditions: String printed to console
				;
				; Receives:
				;     inputNum     [EBP+8] reference to the number the user entered
				; ---------------------------------------------------------------------------------
 000001C6			WriteVal PROC
					; local variables
					LOCAL isNegative:BYTE ; byte flag to store whether the input is a negative number
					LOCAL currentNum:SDWORD  ; this is to store the mathematical total
					LOCAL currentDigit:SDWORD  ; this is to store a single digit
					LOCAL outputStr[15]:BYTE ; store the string that will be printed
					LOCAL remainderCount:DWORD  ; our algorithm needs to know how many remainders we got

					; preserve registers
 000001C6  55		   *	    push   ebp
 000001C7  8B EC	   *	    mov    ebp, esp
 000001C9  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 000001CC  50				PUSH   EAX
 000001CD  53				PUSH   EBX
 000001CE  51				PUSH   ECX
 000001CF  52				PUSH   EDX
 000001D0  57				PUSH   EDI
 000001D1  56				PUSH   ESI
 000001D2  9C				PUSHFD

 000001D3				_initialize:
 000001D3  8B 75 08				MOV  ESI, [EBP+8] ; put inputNum in ESI
 000001D6  8D 7D E5				LEA  EDI, outputStr  ; prepare outputStr for iteration by loading offset
 000001D9  FC					CLD
 000001DA  C7 45 E0				MOV  remainderCount, 0
	   00000000
 000001E1  C6 45 FF 00				MOV  isNegative, 0
 000001E5  C7 45 F4				MOV  currentDigit, 0
	   00000000
 000001EC  8B C6				MOV EAX, ESI
 000001EE  89 45 F8				MOV currentNum, EAX
					
 000001F1				_checkSign:
 000001F1  83 7D F8 00				CMP  currentNum, 0
 000001F5  7C 06				JL   _setIsNegative
 000001F7  C6 45 FF 00				MOV  isNegative, 0
 000001FB  EB 07				JMP  _processDigit

 000001FD				_setIsNegative:
 000001FD  F7 5D F8				NEG  currentNum
 00000200  C6 45 FF 01				MOV  isNegative, 1

 00000204				_processDigit:
 00000204  83 7D F8 0A				CMP  currentNum, 10
						; continue dividing by 10 and storing the remainder until we have a single digit
 00000208  7D 02				JGE  _divideByTen
 0000020A  EB 14				JMP  _writeFirstDigit

 0000020C				_divideByTen:
 0000020C  8B 45 F8				MOV  EAX, currentNum
 0000020F  99					CDQ
 00000210  BB 0000000A				MOV  EBX, 10
 00000215  F7 FB				IDIV EBX
 00000217  89 45 F8				MOV  currentNum, EAX
						; save the remainder on the stack
 0000021A  52					PUSH EDX
 0000021B  FF 45 E0				INC  remainderCount		
 0000021E  EB E4				JMP  _processDigit

 00000220				_writeFirstDigit:
						; the first digit is the final state of currentNum
 00000220  8B 45 F8				MOV  EAX, currentNum
 00000223  89 45 F4				MOV  currentDigit, EAX
						; check if we need to prepend a negative sign
 00000226  80 7D FF 01				CMP  isNegative, 1
 0000022A  74 02				JE   _writeNegativeSign
 0000022C  EB 11				JMP  _appendToStr

 0000022E				_writeNegativeSign:
 0000022E  B8 0000002D				MOV  EAX, 45
 00000233  AA					STOSB
 00000234  EB 09				JMP _appendToStr

 00000236				_processRemainder:
 00000236  58					POP  EAX
 00000237  FF 4D E0				DEC  remainderCount
 0000023A  89 45 F4				MOV  currentDigit, EAX
 0000023D  EB 00				JMP  _appendToStr

 0000023F				_appendToStr:
 0000023F  8B 45 F4				MOV   EAX, currentDigit
 00000242  83 C0 30				ADD   EAX, 48  ; convert integer to ASCII char code
 00000245  AA					STOSB
 00000246  83 7D E0 00				CMP   remainderCount, 0
 0000024A  7F EA				JG    _processRemainder

 0000024C				_strEnd:
 0000024C  B8 00000000				MOV		EAX, 0 ; null byte (0) at the end of the string
 00000251  AA					STOSB
						; load the offset of outputStr and print it to console
 00000252  8D 55 E5				LEA		EDX, outputStr
						mDisplayString	EDX
 00000255  52		     1		PUSH EDX
 00000256  8B D2	     1		MOV  EDX, EDX
 00000258  E8 00000000 E     1		CALL WriteString
 0000025D  5A		     1		POP EDX

					; restore registers
 0000025E  9D				POPFD
 0000025F  5E				POP  ESI
 00000260  5F				POP  EDI
 00000261  5A				POP  EDX
 00000262  59				POP  ECX
 00000263  5B				POP  EBX
 00000264  58				POP  EAX

 00000265  C9		   *	    leave  
 00000266  C2 0004			RET 4

 00000269			WriteVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: EnterNumbers
				;
				; Calls ReadVal in a loop and puts the entries into an array
				;
				; Preconditions: empty numbers array
				;
				; Postconditions: filled numbers array
				;
				; Receives:
				;     numbers     [EBP+8]  the address of the numbers array
				;     ARRAYSIZE   [EBP+12] the constant ARRAYSIZE
				;     prompt	  [EBP+16] prompt for ReadVal
				;     errorMsg    [EBP+20] errorMessage for validation in ReadVal
				;     inputStr    [EBP+24] value to hold temporary string input
				;     count       [EBP+28] length of string input
				;     strLen      [EBP+36] max string length (constant)
				; ---------------------------------------------------------------------------------
 00000269			EnterNumbers PROC
					; preserve registers
 00000269  55				PUSH EBP
 0000026A  8B EC			MOV  EBP, ESP
 0000026C  51				PUSH ECX
 0000026D  57				PUSH EDI
 0000026E  9C				PUSHFD

 0000026F				_setupLoop:
 0000026F  8B 4D 0C				MOV ECX, [EBP+12] ; loop through length of array
 00000272  8B 7D 08				MOV EDI, [EBP+8] ; set EDI to first array element

 00000275				_fillLoop:
 00000275  FF 35 000001D8 R			PUSH strLen
 0000027B  57					PUSH EDI
 0000027C  FF 75 1C				PUSH [EBP+28]
 0000027F  FF 75 18				PUSH [EBP+24]
 00000282  FF 75 14				PUSH [EBP+20]
 00000285  FF 75 10				PUSH [EBP+16]
 00000288  E8 FFFFFE6A				CALL ReadVal
 0000028D  83 C7 04				ADD  EDI, 4
 00000290  E2 E3				LOOP _fillLoop

					; restore registers
 00000292  9D				POPFD
 00000293  59				POP ECX
 00000294  5F				POP EDI
 00000295  5D				POP EBP

 00000296  C2 001C			RET 28

 00000299			EnterNumbers ENDP

				; ---------------------------------------------------------------------------------
				; Name: PrintArray
				;
				; Loop through the array and call WriteVal for each value
				;
				; Preconditions: filled numbers array
				;
				; Postconditions: printed comma-separated values to console
				;
				; Receives:
				;     numbers     [EBP+8]  the address of the numbers array
				;     ARRAYSIZE   [EBP+12] the constant ARRAYSIZE
				;     label		  [EBP+16] display text (offset)
				;     commaDL	  [EBP+20] a comma delimiter (offset)
				; ---------------------------------------------------------------------------------
 00000299			PrintArray PROC
					; preserve registers
 00000299  55				PUSH EBP
 0000029A  8B EC			MOV  EBP, ESP
 0000029C  51				PUSH ECX
 0000029D  57				PUSH EDI
 0000029E  9C				PUSHFD

 0000029F				_setupLoop:
 0000029F  8B 4D 0C				MOV ECX, [EBP+12] ; loop through length of array
 000002A2  8B 7D 08				MOV EDI, [EBP+8] ; set EDI to first array element

 000002A5				_displayLabel:
 000002A5  E8 00000000 E			CALL CrLf
						mDisplayString [EBP+16]
 000002AA  52		     1		PUSH EDX
 000002AB  8B 55 10	     1		MOV  EDX, [EBP+16]
 000002AE  E8 00000000 E     1		CALL WriteString
 000002B3  5A		     1		POP EDX
 000002B4  E8 00000000 E			CALL CrLf

 000002B9				_fillLoop:
 000002B9  FF 37				PUSH [EDI]
 000002BB  E8 FFFFFF06				CALL WriteVal
 000002C0  83 F9 01				CMP  ECX, 1
 000002C3  75 02				JNE  _printDelimiter
 000002C5  EB 0A				JMP  _continue

 000002C7				_printDelimiter:
						; this puts a comma between all but the last
						mDisplayString  [EBP+20]
 000002C7  52		     1		PUSH EDX
 000002C8  8B 55 14	     1		MOV  EDX, [EBP+20]
 000002CB  E8 00000000 E     1		CALL WriteString
 000002D0  5A		     1		POP EDX

 000002D1				_continue:
 000002D1  83 C7 04				ADD  EDI, 4
 000002D4  E2 E3				LOOP _fillLoop

					; restore registers
 000002D6  9D				POPFD
 000002D7  59				POP ECX
 000002D8  5F				POP EDI
 000002D9  5D				POP EBP

 000002DA  C2 0010			RET 16

 000002DD			PrintArray ENDP
				; ---------------------------------------------------------------------------------
				; Name: ComputeSumAvg
				;
				; Loop through the array and generate the sum and (floored) avergage
				;
				; Preconditions: filled numbers array
				;
				; Postconditions: assigned value to output parameters sum and avg
				;
				; Receives:
				;     numbers     [EBP+8]  the address of the numbers array
				;     ARRAYSIZE   [EBP+12] the constant ARRAYSIZE
				;     sum		  [EBP+16] output parameter for sum data (reference)
				;     avg		  [EBP+20] output parameter for avg data (reference)
				; ---------------------------------------------------------------------------------
 000002DD			ComputeSumAvg PROC
					LOCAL runningTotal:SDWORD
					LOCAL arrSize:SDWORD

					; preserve registers
 000002DD  55		   *	    push   ebp
 000002DE  8B EC	   *	    mov    ebp, esp
 000002E0  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000002E3  50				PUSH EAX
 000002E4  53				PUSH EBX
 000002E5  51				PUSH ECX
 000002E6  52				PUSH EDX
 000002E7  57				PUSH EDI
 000002E8  9C				PUSHFD

 000002E9				_setupLoop:
 000002E9  8B 4D 0C				MOV ECX, [EBP+12] ; loop through length of array
 000002EC  8B 7D 08				MOV EDI, [EBP+8] ; set EDI to first array element
 000002EF  C7 45 FC				MOV runningTotal, 0
	   00000000

 000002F6				_sumLoop:
 000002F6  8B 45 FC				MOV EAX, runningTotal
 000002F9  8B 1F				MOV EBX, [EDI]
 000002FB  03 C3				ADD EAX, EBX
 000002FD  89 45 FC				MOV runningTotal, EAX
 00000300  83 C7 04				ADD EDI, 4
 00000303  E2 F1				LOOP _sumLoop

 00000305				_storeSum:
 00000305  8B 45 FC				MOV EAX, runningTotal
 00000308  8B 5D 10				MOV EBX, [EBP+16]
						; assign to sum memory location
 0000030B  89 03				MOV [EBX], EAX

 0000030D				_avg:
 0000030D  8B 45 0C				MOV  EAX, [EBP+12]
 00000310  89 45 F8				MOV  arrSize, EAX
 00000313  8B 45 FC				MOV  EAX, runningTotal
 00000316  99					CDQ
 00000317  F7 7D F8				IDIV arrSize
 0000031A  83 FA 00				CMP  EDX, 0
 0000031D  75 02				JNE  _checkRound
 0000031F  EB 08				JMP  _storeAvg

 00000321				_checkRound:
						; floor-rounding for negative numbers means
 00000321  83 F8 00				CMP EAX, 0
 00000324  7C 02				JL  _floorNegative
 00000326  EB 01				JMP _storeAvg

 00000328				_floorNegative:
 00000328  48					DEC EAX
					
 00000329				_storeAvg:
 00000329  8B 5D 14				MOV EBX, [EBP+20]
 0000032C  89 03				MOV [EBX], EAX

					; restore registers
 0000032E  9D				POPFD
 0000032F  5F				POP EDI
 00000330  5A				POP EDX
 00000331  59				POP ECX
 00000332  5B				POP EBX
 00000333  58				POP EAX

 00000334  C9		   *	    leave  
 00000335  C2 0010			RET 16

 00000338			ComputeSumAvg ENDP

				; ---------------------------------------------------------------------------------
				; Name: PrintSumAvg
				;
				; Displays the values of sum and avg with labels
				;
				; Receives: 
				;     sum      [EBP+8]
				;     sumLabel [EBP+12]
				;     avg      [EBP+16]
				;     avgLabel [EBP+20]
				; ---------------------------------------------------------------------------------
 00000338			PrintSumAvg PROC
					; preserve registers
 00000338  55				PUSH EBP
 00000339  8B EC			MOV  EBP, ESP
 0000033B  52				PUSH EDX

 0000033C				_printSum:
 0000033C  E8 00000000 E			CALL CrLf
						mDisplayString [EBP+12]
 00000341  52		     1		PUSH EDX
 00000342  8B 55 0C	     1		MOV  EDX, [EBP+12]
 00000345  E8 00000000 E     1		CALL WriteString
 0000034A  5A		     1		POP EDX
 0000034B  FF 75 08				PUSH [EBP+8]
 0000034E  E8 FFFFFE73				CALL WriteVal
 00000353  E8 00000000 E			CALL CrLf

 00000358				_printAvg:
						mDisplayString [EBP+20]
 00000358  52		     1		PUSH EDX
 00000359  8B 55 14	     1		MOV  EDX, [EBP+20]
 0000035C  E8 00000000 E     1		CALL WriteString
 00000361  5A		     1		POP EDX
 00000362  FF 75 10				PUSH [EBP+16]
 00000365  E8 FFFFFE5C				CALL WriteVal
 0000036A  E8 00000000 E			CALL CrLf

					; restore registers
 0000036F  5A				POP EDX
 00000370  5D				POP EBP
 00000371  C2 0010			RET 16
 00000374			PrintSumAvg ENDP


				; ---------------------------------------------------------------------------------
				; Name: Farewell
				;
				; Displays a parting message
				;
				; Receives: 
				;     goodbye   [EBP+8]
				; ---------------------------------------------------------------------------------
 00000374			Farewell PROC
 00000374  55				PUSH EBP
 00000375  8B EC			MOV  EBP, ESP

 00000377  E8 00000000 E		CALL CrLf
					mDisplayString [EBP+8]
 0000037C  52		     1		PUSH EDX
 0000037D  8B 55 08	     1		MOV  EDX, [EBP+8]
 00000380  E8 00000000 E     1		CALL WriteString
 00000385  5A		     1		POP EDX
 00000386  E8 00000000 E		CALL CrLf

 0000038B  5D				POP EBP
 0000038C  C2 0004			RET  4

 0000038F			Farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 22:23:37
5String Primitives and Macros     (Proj6_SharpKel.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000023A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000038F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ComputeSumAvg  . . . . . . . . .	P Near	 000002DD _TEXT	Length= 0000005B Public STDCALL
  runningTotal . . . . . . . . .	DWord	 bp - 00000004
  arrSize  . . . . . . . . . . .	DWord	 bp - 00000008
  _setupLoop . . . . . . . . . .	L Near	 000002E9 _TEXT	
  _sumLoop . . . . . . . . . . .	L Near	 000002F6 _TEXT	
  _storeSum  . . . . . . . . . .	L Near	 00000305 _TEXT	
  _avg . . . . . . . . . . . . .	L Near	 0000030D _TEXT	
  _checkRound  . . . . . . . . .	L Near	 00000321 _TEXT	
  _floorNegative . . . . . . . .	L Near	 00000328 _TEXT	
  _storeAvg  . . . . . . . . . .	L Near	 00000329 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnterNumbers . . . . . . . . . .	P Near	 00000269 _TEXT	Length= 00000030 Public STDCALL
  _setupLoop . . . . . . . . . .	L Near	 0000026F _TEXT	
  _fillLoop  . . . . . . . . . .	L Near	 00000275 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Farewell . . . . . . . . . . . .	P Near	 00000374 _TEXT	Length= 0000001B Public STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 00000099 _TEXT	Length= 0000005E Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintArray . . . . . . . . . . .	P Near	 00000299 _TEXT	Length= 00000044 Public STDCALL
  _setupLoop . . . . . . . . . .	L Near	 0000029F _TEXT	
  _displayLabel  . . . . . . . .	L Near	 000002A5 _TEXT	
  _fillLoop  . . . . . . . . . .	L Near	 000002B9 _TEXT	
  _printDelimiter  . . . . . . .	L Near	 000002C7 _TEXT	
  _continue  . . . . . . . . . .	L Near	 000002D1 _TEXT	
PrintSumAvg  . . . . . . . . . .	P Near	 00000338 _TEXT	Length= 0000003C Public STDCALL
  _printSum  . . . . . . . . . .	L Near	 0000033C _TEXT	
  _printAvg  . . . . . . . . . .	L Near	 00000358 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000F7 _TEXT	Length= 000000CF Public STDCALL
  isNegative . . . . . . . . . .	Byte	 bp - 00000001
  isFirstChar  . . . . . . . . .	Byte	 bp - 00000002
  currentNum . . . . . . . . . .	DWord	 bp - 00000008
  nextDigit  . . . . . . . . . .	DWord	 bp - 0000000C
  _getInputAndInitialize . . . .	L Near	 00000104 _TEXT	
  _loadNextByte  . . . . . . . .	L Near	 00000136 _TEXT	
  _checkSignByte . . . . . . . .	L Near	 00000142 _TEXT	
  _hasNegativeSign . . . . . . .	L Near	 0000014C _TEXT	
  _hasPositiveSign . . . . . . .	L Near	 0000015B _TEXT	
  _checkStrByte  . . . . . . . .	L Near	 0000016A _TEXT	
  _strToNum  . . . . . . . . . .	L Near	 00000172 _TEXT	
  _continueLoop  . . . . . . . .	L Near	 0000018E _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000192 _TEXT	
  _stringEnd . . . . . . . . . .	L Near	 000001A6 _TEXT	
  _negate  . . . . . . . . . . .	L Near	 000001AE _TEXT	
  _storeStr  . . . . . . . . . .	L Near	 000001B3 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001C6 _TEXT	Length= 000000A3 Public STDCALL
  isNegative . . . . . . . . . .	Byte	 bp - 00000001
  currentNum . . . . . . . . . .	DWord	 bp - 00000008
  currentDigit . . . . . . . . .	DWord	 bp - 0000000C
  outputStr  . . . . . . . . . .	Byte	 bp - 0000001B
  remainderCount . . . . . . . .	DWord	 bp - 00000020
  _initialize  . . . . . . . . .	L Near	 000001D3 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000001F1 _TEXT	
  _setIsNegative . . . . . . . .	L Near	 000001FD _TEXT	
  _processDigit  . . . . . . . .	L Near	 00000204 _TEXT	
  _divideByTen . . . . . . . . .	L Near	 0000020C _TEXT	
  _writeFirstDigit . . . . . . .	L Near	 00000220 _TEXT	
  _writeNegativeSign . . . . . .	L Near	 0000022E _TEXT	
  _processRemainder  . . . . . .	L Near	 00000236 _TEXT	
  _appendToStr . . . . . . . . .	L Near	 0000023F _TEXT	
  _strEnd  . . . . . . . . . . .	L Near	 0000024C _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000099 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNT  . . . . . . . . . . . . .	Number	 0000000Ch   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgLabel . . . . . . . . . . . .	Byte	 000001A8 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 00000208 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
commaDL  . . . . . . . . . . . .	Byte	 000001C9 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMsg . . . . . . . . . . . .	Byte	 00000122 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000020C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputStr . . . . . . . . . . . .	Byte	 000001CC _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000042 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 0000005B _DATA	
intro4 . . . . . . . . . . . . .	Byte	 00000084 _DATA	
intro5 . . . . . . . . . . . . .	Byte	 000000B5 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listLabel  . . . . . . . . . . .	Byte	 00000168 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numbers  . . . . . . . . . . . .	DWord	 000001DC _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000103 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strLen . . . . . . . . . . . . .	DWord	 000001D8 _DATA	
sumLabel . . . . . . . . . . . .	Byte	 0000018C _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000204 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
