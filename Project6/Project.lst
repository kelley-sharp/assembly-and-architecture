Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 21:19:05
5String Primitives and Macros     (Proj6_SharpKel.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_SharpKel.asm)

				; Author: Kelley Sharp
				; Last Modified: 3/07/2021
				; OSU email address: sharpkel@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 06                 Due Date: 3/14/2021
				; Description: This program asks the user to enter 10 signed decimal integers,
				;	no more than 32 bits long. After validation passes for 10 numbers, the program
				;	will display the numbers back to the user along with the sum and rounded average.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				ExitProcess proto, dwExitCode:dword

 = 00000020			MAX_STR_SIZE EQU 32
 = 0000000C			COUNT        EQU 12  ; we want 10 characters + a sign "+"/"-" and a null byte
 = 00000005			ARRAYSIZE    EQU 5

				mGetString MACRO prompt, strInput, count, strLen
					; preserve registers
					PUSH EAX
					PUSH ECX
					PUSH EDX

					; display prompt
					MOV  EDX, prompt
					CALL WriteString

					; get input up to count
					MOV  EDX, strInput ; set up EDX to point to strInput
					MOV  ECX, count  ; buffer size according to Irvine
					CALL ReadString
					MOV  strLen, EAX ; store length in strLen
					; restore registers
					POP  EAX
					POP  EDX
					POP  ECX

				ENDM

				mDisplayString MACRO strOutput
					; preserve registers
					PUSH EDX

					; print string
					MOV  EDX, strOutput
					CALL WriteString

					; restore registers
					POP EDX

				ENDM

 00000000			.data
				; Global Constants (with text-equivalents for easier string interpolation)

				; Intro Strings
 00000000 47 65 74 74 69	intro1	    BYTE "Getting low with I/0 Procedures", 0
	   6E 67 20 6C 6F
	   77 20 77 69 74
	   68 20 49 2F 30
	   20 50 72 6F 63
	   65 64 75 72 65
	   73 00
 00000020 44 65 73 69 67	intro2	    BYTE "Designed and created by: Kelley Sharp", 0
	   6E 65 64 20 61
	   6E 64 20 63 72
	   65 61 74 65 64
	   20 62 79 3A 20
	   4B 65 6C 6C 65
	   79 20 53 68 61
	   72 70 00
 00000046 50 6C 65 61 73	intro3	    BYTE "Please enter 10 signed decimal integers.", 0
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   00
 0000006F 45 61 63 68 20	intro4      BYTE "Each number needs to fit into a 32-bit register.", 0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 66 69 74 20
	   69 6E 74 6F 20
	   61 20 33 32 2D
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 00
 000000A0 41 66 74 65 72	intro5      BYTE "Afterwards I will give you the full list of integers, their sum, and average.", 0
	   77 61 72 64 73
	   20 49 20 77 69
	   6C 6C 20 67 69
	   76 65 20 79 6F
	   75 20 74 68 65
	   20 66 75 6C 6C
	   20 6C 69 73 74
	   20 6F 66 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 61
	   76 65 72 61 67
	   65 2E 00

				; Prompt
 000000EE 50 6C 65 61 73	prompt      BYTE "Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000010D 45 52 52 4F 52	errorMsg    BYTE "ERROR: You did not enter an signed number or your number was too big.", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 00

				; Label/Misc Strings
 00000153 54 68 65 73 65	listMsg		BYTE "These are the numbers you entered: ", 0 
	   20 61 72 65 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 79 6F 75
	   20 65 6E 74 65
	   72 65 64 3A 20
	   00
 00000177 54 68 65 20 73	sumMsg		BYTE "The sum of the numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 00000193 54 68 65 20 72	avgMsg		BYTE "The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 000001AC 2C 20 00		commaDL     BYTE ", ", 0   ; delimiter for list output

				; User data variables
 000001AF  00000020 [		inputStr    BYTE   MAX_STR_SIZE  DUP(?) ; for ReadVal
	    00
	   ]
 000001CF 00000000		strLen		DWORD  ?  ; store the length of the input string
 000001D3  00000005 [		numbers     SDWORD ARRAYSIZE DUP(?)
	    00000000
	   ]
 000001E7 00000000		sum         SDWORD 0
 000001EB 00000000		avg         SDWORD 0


				; Summary & Conclusion Strings
 000001EF 49 20 68 6F 70	goodbye		BYTE "I hope you enjoyed using my program! The end.", 0
	   65 20 79 6F 75
	   20 65 6E 6A 6F
	   79 65 64 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 20 54 68 65
	   20 65 6E 64 2E
	   00

 0000021D 59 45 50 00		debug		BYTE "YEP", 0

 00000000			.code
 00000000			main PROC

 00000000  68 000000A0 R		PUSH OFFSET intro5
 00000005  68 0000006F R		PUSH OFFSET intro4
 0000000A  68 00000046 R		PUSH OFFSET intro3
 0000000F  68 00000020 R		PUSH OFFSET intro2
 00000014  68 00000000 R		PUSH OFFSET intro1
 00000019  E8 00000040			CALL Introduction

 0000001E  FF 35 000001CF R		PUSH strLen
 00000024  6A 0C			PUSH COUNT
 00000026  68 000001AF R		PUSH OFFSET inputStr
 0000002B  68 0000010D R		PUSH OFFSET errorMsg
 00000030  68 000000EE R		PUSH OFFSET prompt
 00000035  6A 05			PUSH ARRAYSIZE
 00000037  68 000001D3 R		PUSH OFFSET numbers
 0000003C  E8 000001E9			CALL EnterNumbers

 00000041  68 000001AC R		PUSH OFFSET commaDL
 00000046  68 00000153 R		PUSH OFFSET listMsg
 0000004B  6A 05			PUSH ARRAYSIZE
 0000004D  68 000001D3 R		PUSH OFFSET numbers
 00000052  E8 00000203			CALL PrintArray

					;CALL Farewell

					Invoke ExitProcess, 0
 00000057  6A 00	   *	    push   +000000000h
 00000059  E8 00000000 E   *	    call   ExitProcess
 0000005E			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: Introduction
				;
				; Displays programmer's name, program's name, and instructions.
				;
				; Receives: 
				;     intro1   [EBP+8]
				;     intro2   [EBP+12]
				;     intro3   [EBP+16]
				;     intro4   [EBP+20]
				;     intro5   [EBP+24]
				; ---------------------------------------------------------------------------------
 0000005E			Introduction PROC
					; preserve registers
 0000005E  55				PUSH EBP
 0000005F  8B EC			MOV  EBP, ESP
 00000061  52				PUSH EDX

					; display name and title
					mDisplayString [EBP+8]
 00000062  52		     1		PUSH EDX
 00000063  8B 55 08	     1		MOV  EDX, [EBP+8]
 00000066  E8 00000000 E     1		CALL WriteString
 0000006B  5A		     1		POP EDX
 0000006C  E8 00000000 E		CALL CrLf
					mDisplayString [EBP+12]
 00000071  52		     1		PUSH EDX
 00000072  8B 55 0C	     1		MOV  EDX, [EBP+12]
 00000075  E8 00000000 E     1		CALL WriteString
 0000007A  5A		     1		POP EDX
 0000007B  E8 00000000 E		CALL CrLf
 00000080  E8 00000000 E		CALL CrLf

					; display instructions
					mDisplayString [EBP+16]
 00000085  52		     1		PUSH EDX
 00000086  8B 55 10	     1		MOV  EDX, [EBP+16]
 00000089  E8 00000000 E     1		CALL WriteString
 0000008E  5A		     1		POP EDX
 0000008F  E8 00000000 E		CALL CrLf	
					mDisplayString [EBP+20]
 00000094  52		     1		PUSH EDX
 00000095  8B 55 14	     1		MOV  EDX, [EBP+20]
 00000098  E8 00000000 E     1		CALL WriteString
 0000009D  5A		     1		POP EDX
 0000009E  E8 00000000 E		CALL CrLf	
					mDisplayString [EBP+24]
 000000A3  52		     1		PUSH EDX
 000000A4  8B 55 18	     1		MOV  EDX, [EBP+24]
 000000A7  E8 00000000 E     1		CALL WriteString
 000000AC  5A		     1		POP EDX
 000000AD  E8 00000000 E		CALL CrLf
 000000B2  E8 00000000 E		CALL CrLf

					; restore registers
 000000B7  5A				POP EDX
 000000B8  5D				POP EBP
 000000B9  C2 0014			RET 20
 000000BC			Introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Reads an input value from the user and applies validation
				;
				; Preconditions: None
				;
				; Postconditions: Sets the value of inputNum to the numeric equivalent of the last
				;				  valid string that was entered
				;
				; Receives: 
				;     prompt   [EBP+8]
				;     errorMsg [EBP+12]
				;     inputStr [EBP+16]
				;     count    [EBP+20]
				;     inputNum [EBP+24]
				;     strLen   [EBP+28]
				;
				; ---------------------------------------------------------------------------------
 000000BC			ReadVal PROC
					; local variables
					LOCAL isNegative:BYTE ; byte flag to store whether the input is a negative number
					LOCAL isFirstChar:BYTE ; byte flag for looping - first case is special
					LOCAL currentNum:SDWORD ; store the current number, a running total until the end
					LOCAL nextDigit:SDWORD ; tmp variable to add to current number

					; preserve registers
 000000BC  55		   *	    push   ebp
 000000BD  8B EC	   *	    mov    ebp, esp
 000000BF  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000000C2  50				PUSH EAX
 000000C3  53				PUSH EBX
 000000C4  51				PUSH ECX
 000000C5  52				PUSH EDX
 000000C6  56				PUSH ESI
 000000C7  57				PUSH EDI
 000000C8  9C				PUSHFD

 000000C9				_getInputAndInitialize:
						mGetString [EBP+8], [EBP+16], [EBP+20], [EBP+28]
 000000C9  50		     1		PUSH EAX
 000000CA  51		     1		PUSH ECX
 000000CB  52		     1		PUSH EDX
 000000CC  8B 55 08	     1		MOV  EDX, [EBP+8]
 000000CF  E8 00000000 E     1		CALL WriteString
 000000D4  8B 55 10	     1		MOV  EDX, [EBP+16] ; set up EDX to point to strInput
 000000D7  8B 4D 14	     1		MOV  ECX, [EBP+20]  ; buffer size according to Irvine
 000000DA  E8 00000000 E     1		CALL ReadString
 000000DF  89 45 1C	     1		MOV  [EBP+28], EAX ; store length in strLen
 000000E2  58		     1		POP  EAX
 000000E3  5A		     1		POP  EDX
 000000E4  59		     1		POP  ECX
						; prepare string to be looped over
 000000E5  8B 75 10				MOV  ESI, [EBP+16] ; put string in ESI
 000000E8  8B 4D 1C				MOV  ECX, [EBP+28] ; put length in ECX for loop
 000000EB  FC					CLD
 000000EC  C6 45 FE 01				MOV  isFirstChar, 1
 000000F0  C7 45 F8				MOV  currentNum, 0
	   00000000

 000000F7				_loadNextByte:
						; load in 1 byte at a time
 000000F7  B8 00000000				MOV   EAX, 0
 000000FC  AC					LODSB
						; skip ahead if not first byte
 000000FD  80 7D FE 00				CMP   isFirstChar, 0
 00000101  74 28				JE    _checkStrByte

 00000103				_checkSignByte:
						; the first char we check to see if there is a sign
 00000103  3C 2D				CMP  AL, 45  ; "-" character
 00000105  74 06				JE   _hasNegativeSign
 00000107  3C 2B				CMP  AL, 43  ; "+" character
 00000109  74 11				JE	 _hasPositiveSign
						; otherwise jump to checkByte normally
 0000010B  EB 1E				JMP  _checkStrByte

 0000010D				_hasNegativeSign:
 0000010D  C6 45 FF 01				MOV  isNegative, 1
 00000111  C6 45 FE 00				MOV  isFirstChar, 0
						; check edge case where user just enters "-"
 00000115  83 F9 01				CMP  ECX, 1
 00000118  74 39				JE   _error
 0000011A  EB 33				JMP  _continueLoop

 0000011C				_hasPositiveSign:
 0000011C  C6 45 FF 00				MOV  isNegative, 0
 00000120  C6 45 FE 00				MOV  isFirstChar, 0
						; check edge case where user just enters "+"
 00000124  83 F9 01				CMP  ECX, 1
 00000127  74 2A				JE   _error
 00000129  EB 24				JMP  _continueLoop

 0000012B				_checkStrByte:
						; ensure it's a valid digit 0-9
 0000012B  3C 30				CMP   AL, 48
 0000012D  72 24				JB    _error
 0000012F  3C 39				CMP   AL, 57
 00000131  77 20				JA    _error

 00000133				_strToNum:
						; algorithm: (10 * currentNum) + nextDigit
 00000133  2C 30				SUB   AL, 48
 00000135  0F B6 C0				MOVZX EAX, AL  ; zero-extend AL so it fits into SDWORD
 00000138  89 45 F4				MOV   nextDigit, EAX
 0000013B  8B 45 F8				MOV   EAX, currentNum
 0000013E  BB 0000000A				MOV   EBX, 10
 00000143  F7 E3				MUL   EBX
 00000145  70 0C				JO	  _error
 00000147  03 45 F4				ADD   EAX, nextDigit
 0000014A  70 07				JO	  _error
 0000014C  89 45 F8				MOV   currentNum, EAX

 0000014F				_continueLoop:
 0000014F  E2 A6				LOOP  _loadNextByte
 00000151  EB 14				JMP   _stringEnd

 00000153				_error:
						mDisplayString [EBP+12]
 00000153  52		     1		PUSH EDX
 00000154  8B 55 0C	     1		MOV  EDX, [EBP+12]
 00000157  E8 00000000 E     1		CALL WriteString
 0000015C  5A		     1		POP EDX
 0000015D  E8 00000000 E			CALL  CrLf
 00000162  E9 FFFFFF62				JMP  _getInputAndInitialize

 00000167				_stringEnd:
 00000167  80 7D FF 01				CMP   isNegative, 1
 0000016B  74 02				JE    _negate
 0000016D  EB 05				JMP   _storeStr

 0000016F				_negate:
 0000016F  F7 5D F8				NEG   currentNum
 00000172  70 DF				JO	  _error

 00000174				_storeStr:
 00000174  8B 45 F8				MOV   EAX, currentNum
						; assign inputNum (output parameter) the value of currentNum local
 00000177  8B 7D 18				MOV   EDI, [EBP+24] 
 0000017A  89 07				MOV   [EDI], EAX

					; restore registers
 0000017C  9D				POPFD
 0000017D  5F				POP  EDI
 0000017E  5E				POP  ESI
 0000017F  5A				POP  EDX
 00000180  59				POP  ECX
 00000181  5B				POP  EBX
 00000182  58				POP  EAX

 00000183  C9		   *	    leave  
 00000184  C2 0018			RET  24

 00000187			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Prints a SDWORD value as a string of digits
				;
				; Preconditions: SDWORD in inputNum
				;
				; Postconditions: String printed to console
				;
				; Receives:
				;     inputNum     [EBP+8]
				; ---------------------------------------------------------------------------------
 00000187			WriteVal PROC
					; local variables
					LOCAL isNegative:BYTE ; byte flag to store whether the input is a negative number
					LOCAL currentNum:SDWORD
					LOCAL currentDigit:SDWORD
					LOCAL outputStr[15]:BYTE
					LOCAL remainderCount:DWORD

					; preserve registers
 00000187  55		   *	    push   ebp
 00000188  8B EC	   *	    mov    ebp, esp
 0000018A  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 0000018D  50				PUSH   EAX
 0000018E  53				PUSH   EBX
 0000018F  51				PUSH   ECX
 00000190  52				PUSH   EDX
 00000191  57				PUSH   EDI
 00000192  56				PUSH   ESI
 00000193  9C				PUSHFD

 00000194				_initialize:
 00000194  8B 75 08				MOV  ESI, [EBP+8] ; put inputNum in ESI
 00000197  8D 7D E5				LEA  EDI, outputStr  ; prepare outputStr for iteration
 0000019A  FC					CLD
 0000019B  C7 45 E0				MOV  remainderCount, 0
	   00000000
 000001A2  C6 45 FF 00				MOV  isNegative, 0
 000001A6  C7 45 F4				MOV  currentDigit, 0
	   00000000

 000001AD				_analyzeNumber:
 000001AD  8B C6				MOV EAX, ESI
 000001AF  89 45 F8				MOV currentNum, EAX
					
 000001B2				_checkSign:
 000001B2  83 7D F8 00				CMP  currentNum, 0
 000001B6  7C 06				JL   _isNegative
 000001B8  C6 45 FF 00				MOV  isNegative, 0
 000001BC  EB 07				JMP  _processDigit

 000001BE				_isNegative:
 000001BE  F7 5D F8				NEG  currentNum
 000001C1  C6 45 FF 01				MOV  isNegative, 1

 000001C5				_processDigit:
 000001C5  83 7D F8 0A				CMP  currentNum, 10
						; continue dividing by 10 and storing the remainder until we have a single digit
 000001C9  7D 02				JGE  _divideByTen
 000001CB  EB 14				JMP  _writeFirstDigit

 000001CD				_divideByTen:
 000001CD  8B 45 F8				MOV  EAX, currentNum
 000001D0  99					CDQ
 000001D1  BB 0000000A				MOV  EBX, 10
 000001D6  F7 FB				IDIV EBX
 000001D8  89 45 F8				MOV  currentNum, EAX
						; save the remainder on the stack
 000001DB  52					PUSH EDX
 000001DC  FF 45 E0				INC  remainderCount		
 000001DF  EB E4				JMP  _processDigit

 000001E1				_writeFirstDigit:
						; the first digit is the final state of currentNum
 000001E1  8B 45 F8				MOV  EAX, currentNum
 000001E4  89 45 F4				MOV  currentDigit, EAX
						; check if we need to prepend a negative sign
 000001E7  80 7D FF 01				CMP  isNegative, 1
 000001EB  74 02				JE   _writeNegativeSign
 000001ED  EB 11				JMP _appendToStr

 000001EF				_writeNegativeSign:
 000001EF  B8 0000002D				MOV EAX, 45
 000001F4  AA					STOSB
 000001F5  EB 09				JMP _appendToStr

 000001F7				_processRemainder:
 000001F7  58					POP EAX
 000001F8  FF 4D E0				DEC remainderCount
 000001FB  89 45 F4				MOV currentDigit, EAX
 000001FE  EB 00				JMP _appendToStr

 00000200				_appendToStr:
 00000200  8B 45 F4				MOV   EAX, currentDigit
 00000203  83 C0 30				ADD   EAX, 48  ; convert integer to ASCII char code
 00000206  AA					STOSB
 00000207  83 7D E0 00				CMP  remainderCount, 0
 0000020B  7F EA				JG   _processRemainder

 0000020D				_strEnd:
 0000020D  B8 00000000				MOV				EAX, 0 ; null byte (0) at the end of the string
 00000212  AA					STOSB
						; load the offset of outputStr and print it to console
 00000213  8D 55 E5				LEA				EDX, outputStr
						mDisplayString	EDX
 00000216  52		     1		PUSH EDX
 00000217  8B D2	     1		MOV  EDX, EDX
 00000219  E8 00000000 E     1		CALL WriteString
 0000021E  5A		     1		POP EDX


					; restore registers
 0000021F  9D				POPFD
 00000220  5E				POP  ESI
 00000221  5F				POP  EDI
 00000222  5A				POP  EDX
 00000223  59				POP  ECX
 00000224  5B				POP  EBX
 00000225  58				POP  EAX

 00000226  C9		   *	    leave  
 00000227  C2 0004			RET 4

 0000022A			WriteVal ENDP
				; ---------------------------------------------------------------------------------
				; Name: Farewell
				;
				; Displays parting message with a goodbye
				; ---------------------------------------------------------------------------------	

				; ---------------------------------------------------------------------------------
				; Name: EnterNumbers
				;
				; Calls ReadVal in a loop and puts the entries into an array
				;
				; Preconditions: empty numbers array
				;
				; Postconditions: filled numbers array
				;
				; Receives:
				;     numbers     [EBP+8]  the address of the numbers array
				;     ARRAYSIZE   [EBP+12] the constant ARRAYSIZE
				;     prompt	  [EBP+16] prompt for ReadVal
				;     errorMsg    [EBP+20] errorMessage for validation in ReadVal
				;     inputStr    [EBP+24] value to hold temporary string input
				;     count       [EBP+28] length of string input
				;     strLen      [EBP+36] max string length (constant)
				; ---------------------------------------------------------------------------------
 0000022A			EnterNumbers PROC
					; preserve registers
 0000022A  55				PUSH EBP
 0000022B  8B EC			MOV  EBP, ESP
 0000022D  51				PUSH ECX
 0000022E  57				PUSH EDI
 0000022F  9C				PUSHFD

 00000230				_setupLoop:
 00000230  8B 4D 0C				MOV ECX, [EBP+12] ; loop through length of array
 00000233  8B 7D 08				MOV EDI, [EBP+8] ; set EDI to first array element

 00000236				_fillLoop:
 00000236  FF 35 000001CF R			PUSH strLen
 0000023C  57					PUSH EDI
 0000023D  FF 75 1C				PUSH [EBP+28]
 00000240  FF 75 18				PUSH [EBP+24]
 00000243  FF 75 14				PUSH [EBP+20]
 00000246  FF 75 10				PUSH [EBP+16]
 00000249  E8 FFFFFE6E				CALL ReadVal
 0000024E  83 C7 04				ADD EDI, 4
 00000251  E2 E3				LOOP _fillLoop

					; restore registers
 00000253  9D				POPFD
 00000254  59				POP ECX
 00000255  5F				POP EDI
 00000256  5D				POP EBP

 00000257  C2 001C			RET 28

 0000025A			EnterNumbers ENDP

				; ---------------------------------------------------------------------------------
				; Name: PrintArray
				;
				; Loop through the array and call WriteVal for each value
				;
				; Preconditions: filled numbers array
				;
				; Postconditions: printed comma-separated values to console
				;
				; Receives:
				;     numbers     [EBP+8]  the address of the numbers array
				;     ARRAYSIZE   [EBP+12] the constant ARRAYSIZE
				;     label		  [EBP+16] display text (offset)
				;     commaDL	  [EBP+20] a comma delimiter (offset)
				; ---------------------------------------------------------------------------------
 0000025A			PrintArray PROC
					; preserve registers
 0000025A  55				PUSH EBP
 0000025B  8B EC			MOV  EBP, ESP
 0000025D  51				PUSH ECX
 0000025E  57				PUSH EDI
 0000025F  9C				PUSHFD

 00000260				_setupLoop:
 00000260  8B 4D 0C				MOV ECX, [EBP+12] ; loop through length of array
 00000263  8B 7D 08				MOV EDI, [EBP+8] ; set EDI to first array element

 00000266				_displayLabel:
 00000266  E8 00000000 E			CALL CrLf
 0000026B  8B 55 10				MOV  EDX, [EBP+16]
 0000026E  E8 00000000 E			CALL WriteString

 00000273				_fillLoop:
 00000273  FF 37				PUSH [EDI]
 00000275  E8 FFFFFF0D				CALL WriteVal
 0000027A  83 F9 01				CMP  ECX, 1
 0000027D  75 02				JNE  _printDelimiter
 0000027F  EB 08				JMP _continue

 00000281				_printDelimiter:
						; this puts a comma between all but the last
 00000281  8B 55 14				MOV  EDX, [EBP+20]
 00000284  E8 00000000 E			CALL WriteString

 00000289				_continue:
 00000289  83 C7 04				ADD  EDI, 4
 0000028C  E2 E5				LOOP _fillLoop

					; restore registers
 0000028E  9D				POPFD
 0000028F  59				POP ECX
 00000290  5F				POP EDI
 00000291  5D				POP EBP

 00000292  C2 0010			RET 16
 00000295			PrintArray ENDP
				; ---------------------------------------------------------------------------------
				; Name: ComputeSumAvg
				;
				; Loop through the array and generate the sum and (floored) avergage
				;
				; Preconditions: filled numbers array
				;
				; Postconditions: assigned value to output parameters sum and avg
				;
				; Receives:
				;     numbers     [EBP+8]  the address of the numbers array
				;     ARRAYSIZE   [EBP+12] the constant ARRAYSIZE
				;     sum		  [EBP+16] output parameter for sum data (reference)
				;     avg		  [EBP+20] output parameter for avg data (reference)
				; ---------------------------------------------------------------------------------
 00000295			ComputeSumAvg PROC
					LOCAL runningTotal:SDWORD

					; preserve registers
 00000295  55		   *	    push   ebp
 00000296  8B EC	   *	    mov    ebp, esp
 00000298  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000029B  50				PUSH EAX
 0000029C  51				PUSH ECX
 0000029D  57				PUSH EDI
 0000029E  9C				PUSHFD

					; restore registers
 0000029F  9D				POPFD
 000002A0  5F				POP EDI
 000002A1  59				POP ECX
 000002A2  58				POP EAX

 000002A3  C9		   *	    leave  
 000002A4  C2 0010			RET 16

 000002A7			ComputeSumAvg ENDP
Proj6_SharpKel.asm(551) : warning A6004:procedure argument or local not referenced : runningTotal

 000002A7			Farewell PROC
 000002A7  55				PUSH EBP
 000002A8  8B EC			MOV  EBP, ESP

 000002AA  E8 00000000 E		CALL CrLf
 000002AF  8B 55 08			MOV  EDX, [EBP+8]
 000002B2  E8 00000000 E		CALL WriteString
 000002B7  E8 00000000 E		CALL CrLf

 000002BC  5D				POP EBP
 000002BD  C2 0004			RET  4

 000002C0			Farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 21:19:05
5String Primitives and Macros     (Proj6_SharpKel.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000221 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002C0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ComputeSumAvg  . . . . . . . . .	P Near	 00000295 _TEXT	Length= 00000012 Public STDCALL
  runningTotal . . . . . . . . .	DWord	 bp - 00000004
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnterNumbers . . . . . . . . . .	P Near	 0000022A _TEXT	Length= 00000030 Public STDCALL
  _setupLoop . . . . . . . . . .	L Near	 00000230 _TEXT	
  _fillLoop  . . . . . . . . . .	L Near	 00000236 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Farewell . . . . . . . . . . . .	P Near	 000002A7 _TEXT	Length= 00000019 Public STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 0000005E _TEXT	Length= 0000005E Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintArray . . . . . . . . . . .	P Near	 0000025A _TEXT	Length= 0000003B Public STDCALL
  _setupLoop . . . . . . . . . .	L Near	 00000260 _TEXT	
  _displayLabel  . . . . . . . .	L Near	 00000266 _TEXT	
  _fillLoop  . . . . . . . . . .	L Near	 00000273 _TEXT	
  _printDelimiter  . . . . . . .	L Near	 00000281 _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000289 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000BC _TEXT	Length= 000000CB Public STDCALL
  isNegative . . . . . . . . . .	Byte	 bp - 00000001
  isFirstChar  . . . . . . . . .	Byte	 bp - 00000002
  currentNum . . . . . . . . . .	DWord	 bp - 00000008
  nextDigit  . . . . . . . . . .	DWord	 bp - 0000000C
  _getInputAndInitialize . . . .	L Near	 000000C9 _TEXT	
  _loadNextByte  . . . . . . . .	L Near	 000000F7 _TEXT	
  _checkSignByte . . . . . . . .	L Near	 00000103 _TEXT	
  _hasNegativeSign . . . . . . .	L Near	 0000010D _TEXT	
  _hasPositiveSign . . . . . . .	L Near	 0000011C _TEXT	
  _checkStrByte  . . . . . . . .	L Near	 0000012B _TEXT	
  _strToNum  . . . . . . . . . .	L Near	 00000133 _TEXT	
  _continueLoop  . . . . . . . .	L Near	 0000014F _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000153 _TEXT	
  _stringEnd . . . . . . . . . .	L Near	 00000167 _TEXT	
  _negate  . . . . . . . . . . .	L Near	 0000016F _TEXT	
  _storeStr  . . . . . . . . . .	L Near	 00000174 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000187 _TEXT	Length= 000000A3 Public STDCALL
  isNegative . . . . . . . . . .	Byte	 bp - 00000001
  currentNum . . . . . . . . . .	DWord	 bp - 00000008
  currentDigit . . . . . . . . .	DWord	 bp - 0000000C
  outputStr  . . . . . . . . . .	Byte	 bp - 0000001B
  remainderCount . . . . . . . .	DWord	 bp - 00000020
  _initialize  . . . . . . . . .	L Near	 00000194 _TEXT	
  _analyzeNumber . . . . . . . .	L Near	 000001AD _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000001B2 _TEXT	
  _isNegative  . . . . . . . . .	L Near	 000001BE _TEXT	
  _processDigit  . . . . . . . .	L Near	 000001C5 _TEXT	
  _divideByTen . . . . . . . . .	L Near	 000001CD _TEXT	
  _writeFirstDigit . . . . . . .	L Near	 000001E1 _TEXT	
  _writeNegativeSign . . . . . .	L Near	 000001EF _TEXT	
  _processRemainder  . . . . . .	L Near	 000001F7 _TEXT	
  _appendToStr . . . . . . . . .	L Near	 00000200 _TEXT	
  _strEnd  . . . . . . . . . . .	L Near	 0000020D _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000005E Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 00000005h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNT  . . . . . . . . . . . . .	Number	 0000000Ch   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_STR_SIZE . . . . . . . . . .	Number	 00000020h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgMsg . . . . . . . . . . . . .	Byte	 00000193 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 000001EB _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
commaDL  . . . . . . . . . . . .	Byte	 000001AC _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
debug  . . . . . . . . . . . . .	Byte	 0000021D _DATA	
errorMsg . . . . . . . . . . . .	Byte	 0000010D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000001EF _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputStr . . . . . . . . . . . .	Byte	 000001AF _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000020 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 00000046 _DATA	
intro4 . . . . . . . . . . . . .	Byte	 0000006F _DATA	
intro5 . . . . . . . . . . . . .	Byte	 000000A0 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listMsg  . . . . . . . . . . . .	Byte	 00000153 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numbers  . . . . . . . . . . . .	DWord	 000001D3 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000000EE _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strLen . . . . . . . . . . . . .	DWord	 000001CF _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 00000177 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000001E7 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
