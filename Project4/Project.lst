Microsoft (R) Macro Assembler Version 14.28.29335.0	    02/21/21 23:50:32
4Nested Loops and Procedures     (Proj4_SharpKel.asm	     Page 1 - 1


				TITLE Nested Loops and Procedures     (Proj4_SharpKel.asm)

				; Author: Kelley Sharp
				; Last Modified: 2/21/2021
				; OSU email address: sharpkel@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 04                 Due Date: 2/21/2021
				; Description: Program prompts user to enter number of prime numbers they would like to see (between 1 and 200 prime numbers).
				;	If user enters an invalid number, notifies them of the number being out of range.
				;	If user enters a valid number, that number of primes will be printed starting with "2".
				;   The program will print up to 10 primes per line (the final line can have less than 10).
				;   (Extra Credit) Also the prime numbers are aligned into columns.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				ExitProcess proto, dwExitCode:dword

 00000000			.data
				; Global Constants (with text-equivalents for easier string interpolation)
 = 00000001			LOWER    EQU 1
 = "1"				LOWER_T  EQU <"1"> 
 = 000000C8			UPPER	 EQU 200
 = "200"			UPPER_T  EQU <"200">
 = 0000000A			PER_LINE EQU 10

				; Intro & Prompt Strings
 00000000 48 69 2C 20 49	intro		BYTE "Hi, I'm Kelley. Welcome to the Prime Number Generator!", 0
	   27 6D 20 4B 65
	   6C 6C 65 79 2E
	   20 57 65 6C 63
	   6F 6D 65 20 74
	   6F 20 74 68 65
	   20 50 72 69 6D
	   65 20 4E 75 6D
	   62 65 72 20 47
	   65 6E 65 72 61
	   74 6F 72 21 00
 00000037 2A 2A 45 43 3A	eCred		BYTE "**EC: Align the output columns", 0
	   20 41 6C 69 67
	   6E 20 74 68 65
	   20 6F 75 74 70
	   75 74 20 63 6F
	   6C 75 6D 6E 73
	   00
 00000056 49 20 63 61 6E	rules		BYTE "I can show you between ", LOWER_T," and ", UPPER_T," prime numbers.", 0
	   20 73 68 6F 77
	   20 79 6F 75 20
	   62 65 74 77 65
	   65 6E 20 31 20
	   61 6E 64 20 32
	   30 30 20 70 72
	   69 6D 65 20 6E
	   75 6D 62 65 72
	   73 2E 00
 00000086 50 6C 65 61 73	prompt		BYTE "Please enter the # of primes you'd like to see [", LOWER_T, "...", UPPER_T, "]: ", 0
	   65 20 65 6E 74
	   65 72 20 74 68
	   65 20 23 20 6F
	   66 20 70 72 69
	   6D 65 73 20 79
	   6F 75 27 64 20
	   6C 69 6B 65 20
	   74 6F 20 73 65
	   65 20 5B 31 2E
	   2E 2E 32 30 30
	   5D 3A 20 00
 000000C1 49 20 63 61 6E	invalid_n	BYTE "I can't fulfill that request. Your number is outside my range.", 0
	   27 74 20 66 75
	   6C 66 69 6C 6C
	   20 74 68 61 74
	   20 72 65 71 75
	   65 73 74 2E 20
	   59 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 69 73 20
	   6F 75 74 73 69
	   64 65 20 6D 79
	   20 72 61 6E 67
	   65 2E 00

				; numerical variables
 00000100 00000000		numberOfPrimes		DWORD ?  ; what the user will input
 00000104 00000002		currentNum          DWORD 2  ; for storing prime candidates. Start from 2 since 1 is not prime.
 00000108 00000002		currentDivisor		DWORD 2  ; for checking whether the currentNum is prime. Divide starting from 2.
 0000010C 00000000		numberPrintedSoFar  DWORD 0  ; ensuring we only print 10 per line

				; variables for formatting the primes (with extra credit column alignment)
 00000110 20 20 20 00		spacer				BYTE "   ", 0
 00000114 20 20 20 00		digitSpacer			BYTE "   ", 0 ; single digits need this much padding, e.g. "1   "
 00000118 20 20 00		doubleDigitSpacer	BYTE "  ", 0  ; same as above for double digits, e.g.	   "10  "
 0000011B 20 00			tripleDigitSpacer   BYTE " ", 0   ; same as above for triple digits, e.g.      "100 "

				; Summary & Conclusion Strings
 0000011D 49 20 68 6F 70	goodbye		BYTE "I hope you've enjoyed your prime time. Goodbye!", 0
	   65 20 79 6F 75
	   27 76 65 20 65
	   6E 6A 6F 79 65
	   64 20 79 6F 75
	   72 20 70 72 69
	   6D 65 20 74 69
	   6D 65 2E 20 47
	   6F 6F 64 62 79
	   65 21 00

 00000000			.code
 00000000			main PROC

 00000000  E8 00000016			CALL introduction
 00000005  E8 0000003F			CALL getUserData
 0000000A  E8 00000084			CALL showPrimes
 0000000F  E8 0000015D			CALL farewell	

					Invoke ExitProcess, 0
 00000014  6A 00	   *	    push   +000000000h
 00000016  E8 00000000 E   *	    call   ExitProcess
 0000001B			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; Displays program title, programmer's name and instructions
				; ---------------------------------------------------------------------------------
 0000001B			introduction PROC
				; Display program title and programmer's name
 0000001B  BA 00000000 R		MOV EDX, OFFSET intro
 00000020  E8 00000000 E		CALL WriteString
 00000025  E8 00000000 E		CALL CrLf

				; Display extra credit statement
 0000002A  BA 00000037 R		MOV EDX, OFFSET eCred
 0000002F  E8 00000000 E		CALL WriteString
 00000034  E8 00000000 E		CALL CrLf

				; Display objective
 00000039  BA 00000056 R		MOV EDX, OFFSET rules
 0000003E  E8 00000000 E		CALL WriteString
 00000043  E8 00000000 E		CALL CrLf

 00000048  C3				RET

 00000049			introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: getUserData
				;
				; Takes user input and validates it
				;
				; Preconditions: The input number is type DWORD.
				;
				; Postconditions: Changes registers EAX (input) and EDX (printing). Sets numberOfPrimes variable.
				;
				; Receives: None
				;
				; Returns: Nothing (void)
				; ---------------------------------------------------------------------------------
 00000049			getUserData PROC
					; prompt the user for input
 00000049  E8 00000000 E		CALL CrLf
 0000004E  BA 00000086 R		MOV EDX, OFFSET prompt
 00000053  E8 00000000 E		CALL WriteString
 00000058  E8 00000000 E		CALL ReadInt

					; validate input
 0000005D  A3 00000100 R		MOV numberOfPrimes, EAX
 00000062  E8 00000001			CALL validate
 00000067  C3				RET
 00000068			getUserData ENDP

				; ---------------------------------------------------------------------------------
				; Name: validate
				;
				; Subprocedure of getUserData. If the user input is a numberOfPrimes between 1 and 200,
				;   that numberOfPrimes is stored in the global "numberOfPrimes" variable, otherwise the user is
				;	prompted to enter a valid numberOfPrimes.
				; ---------------------------------------------------------------------------------
 00000068			validate PROC
 00000068  83 3D 00000100 R		CMP numberOfPrimes, LOWER
	   01
 0000006F  7C 0D			JL _NotifyUser ; If numberOfPrimes is less than 1
 00000071  81 3D 00000100 R		CMP numberOfPrimes, UPPER
	   000000C8
 0000007B  7F 01			JG _NotifyUser ; If numberOfPrimes is greater than 200
 0000007D  C3				RET

 0000007E				_NotifyUser:
 0000007E  BA 000000C1 R			MOV EDX, OFFSET invalid_n ; says "out of range"
 00000083  E8 00000000 E			CALL WriteString
 00000088  E8 00000000 E			CALL CrLf
 0000008D  E8 FFFFFFB7				CALL getUserData
 00000092  C3					RET
 00000093			validate ENDP

				; ---------------------------------------------------------------------------------
				; Name: showPrimes
				;
				; Takes a valid numberOfPrimes, calculates that many prime numbers, and displays them to user.
				;
				; Preconditions: The global variable numberOfPrimes is type DWORD.
				;
				; Postconditions: Changes registers EAX (division, comparisons), ECX (loop counter, division), EDX (division, printing) 
				;
				; Receives: None
				;
				; Returns: Nothing (void)
				; ---------------------------------------------------------------------------------
 00000093			showPrimes PROC
 00000093  E8 00000000 E		CALL CrLf
 00000098  C7 05 00000104 R		MOV currentNum, 2  ; start from 2 b/c 1 is not defined as prime
	   00000002

 000000A2  8B 0D 00000100 R		MOV ECX, numberOfPrimes  ; loop this many times
 000000A8				_enumeratePrimesUpToNumberOfPrimes:
 000000A8  51					PUSH ECX  ; Preserve outer loop counter
 000000A9  E8 00000009				CALL isPrime
 000000AE  59					POP ECX   ; Restore outer loop counter
 000000AF  E2 F7				LOOP _enumeratePrimesUpToNumberOfPrimes

 000000B1  E8 00000000 E		CALL CrLf
 000000B6  C3				RET
					
 000000B7			showPrimes ENDP

				; ---------------------------------------------------------------------------------
				; Name: isPrime
				;
				; Subprocedure of showPrimes, this computes whether the current number is prime or not.
				; If the current number isn't a prime, it increments until it finds a prime. Then it prints 
				; and returns control to the outer loop
				;
				; Preconditions: The global variables currentNum and currentDivisor are of type DWORD
				;
				; Postconditions: Changes registers EAX (division, comparisons), ECX (division), EDX (division, printing),
				;                 global variables currentDivisor, currentNum
				;
				; Receives: None
				;
				; Returns: Nothing (void)
				; ---------------------------------------------------------------------------------
 000000B7			isPrime PROC
				    
 000000B7  C7 05 00000108 R		MOV currentDivisor, 2  ; primes are divisible by 1, so start testing divisors from 2
	   00000002
 000000C1				_findNextPrime:
						; break condition - if we made it to where currentDivisor == currentNum, then it's prime
 000000C1  A1 00000108 R			mov EAX, currentDivisor
 000000C6  3B 05 00000104 R			CMP EAX, currentNum  
 000000CC  74 2B				JE _isPrime  

						; if the current number divides cleanly by something other than 1 or itself it's not a prime
 000000CE  A1 00000104 R			MOV EAX, currentNum
 000000D3  99					CDQ
 000000D4  F7 35 00000108 R			DIV currentDivisor
 000000DA  83 FA 00				CMP EDX, 0
 000000DD  74 08				JE _isNotPrime

						; this continues this "while" loop
 000000DF  FF 05 00000108 R			INC currentDivisor
 000000E5  EB DA				JMP _findNextPrime

 000000E7				_isNotPrime:
						; this ensures we skip over non-prime numbers
 000000E7  FF 05 00000104 R		    INC currentNum
 000000ED  C7 05 00000108 R			MOV currentDivisor, 2  ; reset divisor
	   00000002
 000000F7  EB C8				JMP _findNextPrime
					
 000000F9				_isPrime:
						; when we've found a prime, we can print it and conclude this iteration of the outer loop
 000000F9  E8 00000007				CALL printPrime	
 000000FE  FF 05 00000104 R			INC currentNum
 00000104  C3					RET
						
 00000105			isPrime ENDP

				; ---------------------------------------------------------------------------------
				; Name: printPrime
				;
				; Subprocedure of isPrime. This is specifically for formatting the primes in a
				; column, with the correct number printed per line.
				;
				; Preconditions: The global variables currentNum is of type DWORD; the other global variables are byte strings
				;
				; Postconditions: Changes registers EAX (comparisons), EDX (printing), global variable numberPrintedSoFar
				;
				; Receives: None
				;
				; Returns: Nothing (void)
				; ---------------------------------------------------------------------------------
 00000105			printPrime PROC

					; print the number itself with minimum spacing applied
 00000105  A1 00000104 R		MOV EAX, currentNum
 0000010A  E8 00000000 E		CALL WriteDec
 0000010F  BA 00000110 R		MOV EDX, OFFSET spacer
 00000114  E8 00000000 E		CALL WriteString

					; extra credit - align the output columns by applying extra spacing
 00000119  83 F8 0A			CMP EAX, 10    
 0000011C  7C 0E			JL  _addDigitSpacers
 0000011E  83 F8 64			CMP EAX, 100
 00000121  7C 15			JL _addDoubleDigitSpacers
 00000123  3D 000003E8			CMP EAX, 1000
 00000128  7C 1A			JL _addTripleDigitSpacers

 0000012A  EB 24			JMP _determineNewLine

 0000012C				_addDigitSpacers:
 0000012C  BA 00000114 R			MOV EDX, OFFSET digitSpacer
 00000131  E8 00000000 E			CALL WriteString
 00000136  EB 18				JMP _determineNewLine

 00000138				_addDoubleDigitSpacers:
 00000138  BA 00000118 R			MOV EDX, OFFSET doubleDigitSpacer
 0000013D  E8 00000000 E			CALL WriteString
 00000142  EB 0C				JMP _determineNewLine

 00000144				_addTripleDigitSpacers:
 00000144  BA 0000011B R			MOV EDX, OFFSET tripleDigitSpacer
 00000149  E8 00000000 E			CALL WriteString
 0000014E  EB 00				JMP _determineNewLine

 00000150				_determineNewLine:
						; ensure we only print 10 primes per line
 00000150  FF 05 0000010C R			INC numberPrintedSoFar
 00000156  A1 0000010C R			MOV EAX, numberPrintedSoFar
 0000015B  83 F8 0A				CMP EAX, PER_LINE    
 0000015E  74 01				JE _addNewLine
 00000160  C3					RET

 00000161				_addNewLine:
 00000161  E8 00000000 E			CALL CrLf
 00000166  C7 05 0000010C R			MOV numberPrintedSoFar, 0
	   00000000
 00000170  C3					RET

 00000171			printPrime ENDP

				; ---------------------------------------------------------------------------------
				; Name: farewell
				;
				; Displays parting message with a goodbye
				; ---------------------------------------------------------------------------------	
 00000171			farewell PROC

 00000171  E8 00000000 E		CALL CrLf
 00000176  BA 0000011D R		MOV EDX, OFFSET goodbye
 0000017B  E8 00000000 E		CALL WriteString
 00000180  E8 00000000 E		CALL CrLf

 00000185  C3				RET

 00000186			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    02/21/21 23:50:32
4Nested Loops and Procedures     (Proj4_SharpKel.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000014D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000186 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 00000171 _TEXT	Length= 00000015 Public STDCALL
getUserData  . . . . . . . . . .	P Near	 00000049 _TEXT	Length= 0000001F Public STDCALL
introduction . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 0000002E Public STDCALL
isPrime  . . . . . . . . . . . .	P Near	 000000B7 _TEXT	Length= 0000004E Public STDCALL
  _findNextPrime . . . . . . . .	L Near	 000000C1 _TEXT	
  _isNotPrime  . . . . . . . . .	L Near	 000000E7 _TEXT	
  _isPrime . . . . . . . . . . .	L Near	 000000F9 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
printPrime . . . . . . . . . . .	P Near	 00000105 _TEXT	Length= 0000006C Public STDCALL
  _addDigitSpacers . . . . . . .	L Near	 0000012C _TEXT	
  _addDoubleDigitSpacers . . . .	L Near	 00000138 _TEXT	
  _addTripleDigitSpacers . . . .	L Near	 00000144 _TEXT	
  _determineNewLine  . . . . . .	L Near	 00000150 _TEXT	
  _addNewLine  . . . . . . . . .	L Near	 00000161 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showPrimes . . . . . . . . . . .	P Near	 00000093 _TEXT	Length= 00000024 Public STDCALL
  _enumeratePrimesUpToNumberOfPrimes .	L Near	 000000A8 _TEXT	
validate . . . . . . . . . . . .	P Near	 00000068 _TEXT	Length= 0000002B Public STDCALL
  _NotifyUser  . . . . . . . . .	L Near	 0000007E _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWER_T  . . . . . . . . . . . .	Text   	 "1"
LOWER  . . . . . . . . . . . . .	Number	 00000001h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PER_LINE . . . . . . . . . . . .	Number	 0000000Ah   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_T  . . . . . . . . . . . .	Text   	 "200"
UPPER  . . . . . . . . . . . . .	Number	 000000C8h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currentDivisor . . . . . . . . .	DWord	 00000108 _DATA	
currentNum . . . . . . . . . . .	DWord	 00000104 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
digitSpacer  . . . . . . . . . .	Byte	 00000114 _DATA	
doubleDigitSpacer  . . . . . . .	Byte	 00000118 _DATA	
eCred  . . . . . . . . . . . . .	Byte	 00000037 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000011D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
invalid_n  . . . . . . . . . . .	Byte	 000000C1 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numberOfPrimes . . . . . . . . .	DWord	 00000100 _DATA	
numberPrintedSoFar . . . . . . .	DWord	 0000010C _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000086 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rules  . . . . . . . . . . . . .	Byte	 00000056 _DATA	
spacer . . . . . . . . . . . . .	Byte	 00000110 _DATA	
tripleDigitSpacer  . . . . . . .	Byte	 0000011B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
